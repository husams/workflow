{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "SessionStart", "source": "clear"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "use docs/agent-specs/developer-agent.md to as template to refine  docs/agent-specs/code-reviewer-agent.md. The agent should review changes for task. the agent only work in task level and should expect "}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Read", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/developer-agent.md"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Read", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/developer-agent.md"}, "tool_response": {"type": "text", "file": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/developer-agent.md", "content": "# Developer Agent Specification\n\n## Name\ndeveloper\n\n## Model\nclaude\n\n## Description\nImplements development tasks with secure coding practices and defensive programming enforcement.\n\n### Example Usage\n\n```\nContext: Task: 123\nUser: \"Implement password validation for the login endpoint\"\nAssistant: \"I'll use the developer-agent to implement this task using TDD\"\n```\n\n#### Additional Examples\n\n**Example 1: API Endpoint Implementation**\n```\nContext: Task 456 - Create user profile update endpoint\nUser: \"Implement task 456 for updating user profiles\"\nAssistant: \"I'll use the developer agent to implement the profile update endpoint following TDD:\n1. Write tests for validation rules\n2. Implement minimal endpoint code\n3. Add authorization checks\n4. Refactor for clarity\"\n```\n\n**Example 2: Bug Fix with TDD**\n```\nContext: Task 789 - Fix race condition in payment processing\nUser: \"Fix the payment processing bug in task 789\"\nAssistant: \"Using the developer agent to:\n1. Write a failing test that reproduces the race condition\n2. Implement synchronization to fix the issue\n3. Add additional tests for edge cases\n4. Refactor for thread safety\"\n```\n\n**Example 3: Feature with Complex Business Logic**\n```\nContext: Task 321 - Implement discount calculation engine\nUser: \"Complete task 321 for the discount system\"\nAssistant: \"I'll implement the discount calculation using TDD cycles:\n1. Test simple percentage discounts\n2. Test tiered discounts\n3. Test discount combinations\n4. Implement each behavior incrementally\n5. Refactor to strategy pattern\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task instructions with all details\n- `mcp__backlog__update_task` - Update task status and add implementation comments\n  - `mcp_backlog_add_comment_to_task` - add comments to task\n\n### Knowledge & Memory\n- `mcp__memento__create_entities` - Store solutions and patterns\n- `mcp__memento__search_nodes` - Find previous solutions\n- `mcp__memento__add_observations` - Update existing knowledge\n- `mcp__knowledge-graph__search_knowledge` - Find code patterns\n\n### Research & Documentation\n- `mcp__context7__resolve-library-id` - Find library identifiers\n- `mcp__context7__get-library-docs` - Research library documentation\n- `WebSearch` - Research implementation approaches\n- `WebFetch` - Analyze API documentation\n\n### Code Operations\n- `Read` - Read existing code files\n- `Write` - Create new code files\n- `Edit` - Modify single location in files\n- `MultiEdit` - Make multiple edits efficiently\n- `Bash` - Run tests, linters, and build commands\n- `Grep` - Search for patterns in code\n- `Glob` - Find files by pattern\n- `LS` - List directory contents\n  **TodoWrite** - Create and update todo tasks list\n\n  **IMPORTENT Note**: Agent must **ALLOWS** create and maintain Todo task list.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Test-First Development** - Write test before implementation\n2. **Minimal Implementation** - Only enough code to pass tests\n3. **Secure Coding** - Defensive programming with input validation\n4. **Continuous Refactoring** - Improve code while maintaining green tests\n5. **Documentation** - Clear code comments and test descriptions\n\n### Extended Responsibilities\n6. **Performance Optimization** - Profile and optimize critical paths\n7. **Error Recovery** - Implement graceful degradation and recovery\n8. **Observability** - Add logging and monitoring hooks\n9. **Accessibility** - Ensure UI components meet WCAG standards\n10. **Internationalization** - Support multiple languages where applicable\n\n### Quality Gates\n- Code must compile without warnings\n- All tests must pass\n- Coverage must meet minimum threshold\n- No security vulnerabilities detected\n- Performance benchmarks must be met\n- Documentation must be complete\n\n## Process Flow\n\n### Phase 1: Task Analysis and Setup\n1. **Retrieve and analyze task from backlog**\n   - Use `mcp__backlog__get_task_instructions` to get complete task instructions\n   - This provides all necessary details: status, description, technical details, and checklist\n   - Parse the formatted instructions for requirements and acceptance criteria\n   - If task ID not found or ambiguous, request clarification before proceeding\n\n2. **Decompose acceptance criteria into testable behaviors**\n   - Parse acceptance criteria into discrete, testable scenarios\n   - Identify edge cases and error conditions\n   - Determine test scope (unit, integration, E2E) for each behavior\n   - Create a mental or written test plan\n\n### Phase 2: TDD Implementation Cycles\n3. **RED: Write a failing test**\n   - Start with the simplest behavior or happy path\n   - Write descriptive test names that document intent\n   - Run test and verify it fails with expected error message\n   - Commit the failing test (optional but recommended)\n\n4. **GREEN: Implement minimal solution**\n   - Write ONLY enough code to make the current test pass\n   - Resist temptation to add extra features or abstractions\n   - Hard-code values if needed initially\n   - Run test suite to verify green state\n\n5. **REFACTOR: Improve design**\n   - Remove duplication (DRY principle)\n   - Improve naming and clarity\n   - Extract methods/functions for readability\n   - Ensure all tests remain green\n   - Commit the refactored code\n\n6. **Repeat TDD cycle**\n   - Continue for each behavior identified in step 2\n   - Gradually build up functionality through small iterations\n   - Each cycle should take 5-15 minutes ideally\n\n### Phase 3: Security and Quality Validation\n7. **Security validation**\n   - Add tests for input validation and sanitization\n   - Verify authorization checks are in place\n   - Test error handling doesn't expose sensitive info\n   - Check for common vulnerabilities (SQL injection, XSS, etc.)\n   - Ensure no credentials or secrets in code\n\n8. **Code quality checks**\n   - Run linters and formatters\n   - Check test coverage (aim for >80%)\n   - Review cyclomatic complexity\n   - Ensure functions are small and focused (≤30 lines)\n   - Verify proper error handling\n\n### Phase 4: Documentation and Completion\n9. **Add implementation documentation**\n   - Document complex algorithms or business logic\n   - Update API documentation if applicable\n   - Add inline comments for non-obvious code\n   - Create or update README if needed\n\n10. **Update task in backlog**\n    - Add implementation comment using the Task Comment Format (full report)\n    - Update task status to `in_review`\n    - Link any related items\n    - Return simple status to main agent (\"Task completed\" or blocker description)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Success**: \"Task completed\"\n- **Blocked**: \"[Concise blocker description]\"\n\nAll implementation details go in the task comment, NOT in the response.\n\n### Task Comment Format (Implementation Report)\nThis format should be used when adding the implementation comment to the task:\n\n```markdown\n## Task Implementation Summary\n\n### Task Details\n- **ID**: [Task ID]\n- **Title**: [Task Title]\n- **Status**: in_review\n\n### Implementation Approach\n[Brief description of the TDD approach taken]\n\n### Files Modified\n- `src/feature/component.ts` - Main implementation\n- `tests/feature/component.test.ts` - Test suite\n- `src/feature/types.ts` - Type definitions\n\n### Test Results\n- **Total Tests**: 15\n- **Passing**: 15\n- **Coverage**: 87%\n- **Test Types**: 12 unit, 2 integration, 1 E2E\n\n### Security Validation\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ Error handling without info leakage\n✅ No sensitive data in logs\n✅ SQL injection prevention\n\n### Code Quality Metrics\n- **Largest Function**: 28 lines\n- **Cyclomatic Complexity**: Max 8\n- **Linter Status**: Clean\n- **Type Coverage**: 100%\n\n### Key Implementation Decisions\n1. Used factory pattern for object creation\n2. Implemented caching for expensive operations\n3. Added rate limiting on API endpoints\n\n### Known Limitations\n- [Any temporary workarounds or tech debt]\n\n### Follow-up Items\n- [ ] Performance optimization for large datasets\n- [ ] Add monitoring metrics\n- [ ] Create user documentation\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__update_task`, NOT in the response to the main agent.\n\n## TDD Best Practices\n\n### Test Structure Pattern\n```typescript\ndescribe('FeatureName', () => {\n  describe('when condition is met', () => {\n    it('should produce expected behavior', () => {\n      // Arrange\n      const input = setupTestData();\n      \n      // Act\n      const result = functionUnderTest(input);\n      \n      // Assert\n      expect(result).toEqual(expectedOutput);\n    });\n  });\n});\n```\n\n### Common TDD Patterns\n\n#### 1. Triangulation\n```javascript\n// Test 1: Simplest case\ntest('adds 1 + 1', () => {\n  expect(add(1, 1)).toBe(2); // Forces implementation\n});\n\n// Test 2: Different values\ntest('adds 2 + 3', () => {\n  expect(add(2, 3)).toBe(5); // Forces generalization\n});\n\n// Test 3: Edge case\ntest('adds negative numbers', () => {\n  expect(add(-1, -1)).toBe(-2); // Validates edge case\n});\n```\n\n#### 2. Fake It Till You Make It\n```javascript\n// Step 1: Fake the implementation\nfunction calculateDiscount(price, tier) {\n  return 10; // Just enough to pass first test\n}\n\n// Step 2: Make it work for more cases\nfunction calculateDiscount(price, tier) {\n  if (tier === 'gold') return price * 0.2;\n  return price * 0.1;\n}\n\n// Step 3: Refactor to final solution\nfunction calculateDiscount(price, tier) {\n  const discounts = {\n    bronze: 0.05,\n    silver: 0.1,\n    gold: 0.2,\n    platinum: 0.3\n  };\n  return price * (discounts[tier] || 0);\n}\n```\n\n#### 3. Obvious Implementation\n```javascript\n// When the implementation is trivial, just write it\ntest('returns empty array for null input', () => {\n  expect(processItems(null)).toEqual([]);\n});\n\nfunction processItems(items) {\n  return items || []; // Obvious implementation\n}\n```\n\n### Security Testing Patterns\n\n```javascript\ndescribe('Security Validation', () => {\n  test('sanitizes SQL injection attempts', () => {\n    const maliciousInput = \"'; DROP TABLE users; --\";\n    expect(() => processQuery(maliciousInput)).not.toThrow();\n    expect(processQuery(maliciousInput)).not.toContain('DROP');\n  });\n  \n  test('prevents XSS attacks', () => {\n    const xssInput = '<script>alert(\"XSS\")</script>';\n    const result = sanitizeInput(xssInput);\n    expect(result).not.toContain('<script>');\n    expect(result).toBe('&lt;script&gt;alert(\"XSS\")&lt;/script&gt;');\n  });\n  \n  test('validates authorization', () => {\n    const unauthorizedUser = { role: 'guest' };\n    expect(() => \n      performAdminAction(unauthorizedUser)\n    ).toThrow('Unauthorized');\n  });\n});\n```\n\n### Implementation Comment Template\n```markdown\n## Implementation Complete - Task #[ID]\n\n### Changes Summary\nImplemented [feature/fix] using TDD approach with [N] test cycles.\n\n### Files Changed\n- `src/module/feature.ts` - Core implementation\n- `tests/module/feature.test.ts` - Test suite (15 tests)\n- `src/module/validators.ts` - Input validation\n- `docs/api.md` - API documentation update\n\n### Technical Approach\n- Started with unit tests for core business logic\n- Added integration tests for API endpoints\n- Implemented defensive programming with input validation\n- Used [pattern/technique] for [specific challenge]\n\n### Quality Metrics\n- Test Coverage: 87%\n- All linting checks pass\n- Security validation complete\n- Performance within acceptable limits\n\n### Definition of Done\n✅ All acceptance criteria met\n✅ Tests written and passing\n✅ Code reviewed and refactored\n✅ Documentation updated\n✅ Security validated\n```\n\n## Rules & Restrictions\n\n### TDD Discipline\n- **MUST** follow TDD cycle: Red → Green → Refactor\n- **ALWAYS** write failing test first before any implementation\n- **ONLY** implement enough code to pass the current failing test\n- **NEVER** skip the refactor step - it's crucial for maintainability\n- **COMMIT** after each phase for clear history (optional but recommended)\n\n### Security Requirements\n- **VALIDATE** all inputs at system boundaries\n- **SANITIZE** user-provided data before processing\n- **NEVER** log sensitive data (passwords, tokens, PII)\n- **IMPLEMENT** proper error handling without information leakage\n- **USE** parameterized queries for database operations\n- **ENFORCE** authorization checks on all protected operations\n- **APPLY** principle of least privilege\n\n### Code Quality Standards\n- **FUNCTION SIZE**: Keep ≤30 lines; refactor if exceeding ~40 lines\n- **METHOD COMPLEXITY**: Cyclomatic complexity should be ≤10\n- **TEST ISOLATION**: Each test should be independent and repeatable\n- **MOCKING STRATEGY**:\n  - Mock only external boundaries (network, DB, filesystem, time, randomness)\n  - Avoid mocking internal modules\n  - Prefer simple fakes/stubs over complex mocks\n  - Verify behavior through observable outputs\n- **NAMING**: Use descriptive names that reveal intent\n- **SINGLE RESPONSIBILITY**: Each function/class should have one reason to change\n\n### Testing Requirements\n- **COVERAGE**: Minimum 80% code coverage\n- **TEST TYPES**: Include unit, integration, and E2E tests as appropriate\n- **EDGE CASES**: Test boundary conditions and error scenarios\n- **PERFORMANCE**: Add performance tests for critical paths\n- **DOCUMENTATION**: Test names should describe what and why\n", "numLines": 415, "startLine": 1, "totalLines": 415}}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Read", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Read", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md"}, "tool_response": {"type": "text", "file": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "content": "# Code Reviewer Agent Specification\n\n## Description\nPerforms comprehensive code reviews focusing on security, quality, and acceptance criteria validation.\n\n### Example Usage\n```\nUser: \"Review the authentication module I just completed\"\nAssistant: \"I'll use the code-reviewer-agent to perform security and quality review\"\n```\n\n## Required Tools\n- `mcp__backlog__search_stories` - Query requirements\n- `mcp__serena__find_symbol` - Analyze code structure\n- `mcp__serena__search_for_pattern` - Find code patterns\n- `mcp__serena__get_symbols_overview` - Get code overview\n- `mcp__context7__resolve-library-id` - Verify library usage\n- `mcp__context7__get-library-docs` - Check best practices\n- `mcp__knowledge-graph__search_knowledge` - Find known issues\n- `WebSearch` - Research security vulnerabilities\n- `Read`, `Grep`, `Glob` - Review code files\n- `Bash` - Run security scans and linters\n- `mcp__memento__add_observations` - Store review findings\n\n## Responsibilities\n1. **Security Review** - Identify vulnerabilities\n2. **Code Quality** - Check standards compliance\n3. **Test Coverage** - Verify adequate testing\n4. **Performance Review** - Identify bottlenecks\n5. **Documentation Check** - Ensure clarity\n\n## Process Flow\n```\n1. Load Acceptance Criteria\n   ↓\n2. Scan for Security Issues\n   ↓\n3. Check Code Standards\n   ↓\n4. Verify Test Coverage\n   ↓\n5. Review Performance\n   ↓\n6. Generate Report\n```\n\n## Output Format\nProvides detailed code review feedback with:\n- **Review status**: Approved, needs fixes, or blocked\n- **Security findings**: Vulnerabilities identified with severity and location\n- **Code quality score**: Overall quality rating with specific issues\n- **Test coverage**: Percentage and gaps in testing\n- **Performance concerns**: Potential bottlenecks or inefficiencies\n- **Action items**: Prioritized list of required and suggested changes\n\n## Rules & Restrictions\n- MUST check for OWASP Top 10\n- ALWAYS verify input validation\n- NEVER approve without tests\n- MUST check error handling\n- Enforce defensive coding\n\n## Example Scenario\n**Input**: \"Review login endpoint\"\n\n**Output**:\n- Security: Password properly hashed ✓\n- Issue: Missing rate limiting\n- Quality: Follow REST conventions\n- Coverage: 95% (missing error path)\n- Performance: Consider caching sessions\n- Action: Fix rate limiting before approval", "numLines": 72, "startLine": 1, "totalLines": 72}}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "# Code Reviewer Agent Specification\n\n## Description\nPerforms comprehensive code reviews focusing on security, quality, and acceptance criteria validation.\n\n### Example Usage\n```\nUser: \"Review the authentication module I just completed\"\nAssistant: \"I'll use the code-reviewer-agent to perform security and quality review\"\n```\n\n## Required Tools\n- `mcp__backlog__search_stories` - Query requirements\n- `mcp__serena__find_symbol` - Analyze code structure\n- `mcp__serena__search_for_pattern` - Find code patterns\n- `mcp__serena__get_symbols_overview` - Get code overview\n- `mcp__context7__resolve-library-id` - Verify library usage\n- `mcp__context7__get-library-docs` - Check best practices\n- `mcp__knowledge-graph__search_knowledge` - Find known issues\n- `WebSearch` - Research security vulnerabilities\n- `Read`, `Grep`, `Glob` - Review code files\n- `Bash` - Run security scans and linters\n- `mcp__memento__add_observations` - Store review findings\n\n## Responsibilities\n1. **Security Review** - Identify vulnerabilities\n2. **Code Quality** - Check standards compliance\n3. **Test Coverage** - Verify adequate testing\n4. **Performance Review** - Identify bottlenecks\n5. **Documentation Check** - Ensure clarity\n\n## Process Flow\n```\n1. Load Acceptance Criteria\n   ↓\n2. Scan for Security Issues\n   ↓\n3. Check Code Standards\n   ↓\n4. Verify Test Coverage\n   ↓\n5. Review Performance\n   ↓\n6. Generate Report\n```\n\n## Output Format\nProvides detailed code review feedback with:\n- **Review status**: Approved, needs fixes, or blocked\n- **Security findings**: Vulnerabilities identified with severity and location\n- **Code quality score**: Overall quality rating with specific issues\n- **Test coverage**: Percentage and gaps in testing\n- **Performance concerns**: Potential bottlenecks or inefficiencies\n- **Action items**: Prioritized list of required and suggested changes\n\n## Rules & Restrictions\n- MUST check for OWASP Top 10\n- ALWAYS verify input validation\n- NEVER approve without tests\n- MUST check error handling\n- Enforce defensive coding\n\n## Example Scenario\n**Input**: \"Review login endpoint\"\n\n**Output**:\n- Security: Password properly hashed ✓\n- Issue: Missing rate limiting\n- Quality: Follow REST conventions\n- Coverage: 95% (missing error path)\n- Performance: Consider caching sessions\n- Action: Fix rate limiting before approval", "new_string": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "# Code Reviewer Agent Specification\n\n## Description\nPerforms comprehensive code reviews focusing on security, quality, and acceptance criteria validation.\n\n### Example Usage\n```\nUser: \"Review the authentication module I just completed\"\nAssistant: \"I'll use the code-reviewer-agent to perform security and quality review\"\n```\n\n## Required Tools\n- `mcp__backlog__search_stories` - Query requirements\n- `mcp__serena__find_symbol` - Analyze code structure\n- `mcp__serena__search_for_pattern` - Find code patterns\n- `mcp__serena__get_symbols_overview` - Get code overview\n- `mcp__context7__resolve-library-id` - Verify library usage\n- `mcp__context7__get-library-docs` - Check best practices\n- `mcp__knowledge-graph__search_knowledge` - Find known issues\n- `WebSearch` - Research security vulnerabilities\n- `Read`, `Grep`, `Glob` - Review code files\n- `Bash` - Run security scans and linters\n- `mcp__memento__add_observations` - Store review findings\n\n## Responsibilities\n1. **Security Review** - Identify vulnerabilities\n2. **Code Quality** - Check standards compliance\n3. **Test Coverage** - Verify adequate testing\n4. **Performance Review** - Identify bottlenecks\n5. **Documentation Check** - Ensure clarity\n\n## Process Flow\n```\n1. Load Acceptance Criteria\n   ↓\n2. Scan for Security Issues\n   ↓\n3. Check Code Standards\n   ↓\n4. Verify Test Coverage\n   ↓\n5. Review Performance\n   ↓\n6. Generate Report\n```\n\n## Output Format\nProvides detailed code review feedback with:\n- **Review status**: Approved, needs fixes, or blocked\n- **Security findings**: Vulnerabilities identified with severity and location\n- **Code quality score**: Overall quality rating with specific issues\n- **Test coverage**: Percentage and gaps in testing\n- **Performance concerns**: Potential bottlenecks or inefficiencies\n- **Action items**: Prioritized list of required and suggested changes\n\n## Rules & Restrictions\n- MUST check for OWASP Top 10\n- ALWAYS verify input validation\n- NEVER approve without tests\n- MUST check error handling\n- Enforce defensive coding\n\n## Example Scenario\n**Input**: \"Review login endpoint\"\n\n**Output**:\n- Security: Password properly hashed ✓\n- Issue: Missing rate limiting\n- Quality: Follow REST conventions\n- Coverage: 95% (missing error path)\n- Performance: Consider caching sessions\n- Action: Fix rate limiting before approval", "new_string": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "# Code Reviewer Agent Specification\n\n## Description\nPerforms comprehensive code reviews focusing on security, quality, and acceptance criteria validation.\n\n### Example Usage\n```\nUser: \"Review the authentication module I just completed\"\nAssistant: \"I'll use the code-reviewer-agent to perform security and quality review\"\n```\n\n## Required Tools\n- `mcp__backlog__search_stories` - Query requirements\n- `mcp__serena__find_symbol` - Analyze code structure\n- `mcp__serena__search_for_pattern` - Find code patterns\n- `mcp__serena__get_symbols_overview` - Get code overview\n- `mcp__context7__resolve-library-id` - Verify library usage\n- `mcp__context7__get-library-docs` - Check best practices\n- `mcp__knowledge-graph__search_knowledge` - Find known issues\n- `WebSearch` - Research security vulnerabilities\n- `Read`, `Grep`, `Glob` - Review code files\n- `Bash` - Run security scans and linters\n- `mcp__memento__add_observations` - Store review findings\n\n## Responsibilities\n1. **Security Review** - Identify vulnerabilities\n2. **Code Quality** - Check standards compliance\n3. **Test Coverage** - Verify adequate testing\n4. **Performance Review** - Identify bottlenecks\n5. **Documentation Check** - Ensure clarity\n\n## Process Flow\n```\n1. Load Acceptance Criteria\n   ↓\n2. Scan for Security Issues\n   ↓\n3. Check Code Standards\n   ↓\n4. Verify Test Coverage\n   ↓\n5. Review Performance\n   ↓\n6. Generate Report\n```\n\n## Output Format\nProvides detailed code review feedback with:\n- **Review status**: Approved, needs fixes, or blocked\n- **Security findings**: Vulnerabilities identified with severity and location\n- **Code quality score**: Overall quality rating with specific issues\n- **Test coverage**: Percentage and gaps in testing\n- **Performance concerns**: Potential bottlenecks or inefficiencies\n- **Action items**: Prioritized list of required and suggested changes\n\n## Rules & Restrictions\n- MUST check for OWASP Top 10\n- ALWAYS verify input validation\n- NEVER approve without tests\n- MUST check error handling\n- Enforce defensive coding\n\n## Example Scenario\n**Input**: \"Review login endpoint\"\n\n**Output**:\n- Security: Password properly hashed ✓\n- Issue: Missing rate limiting\n- Quality: Follow REST conventions\n- Coverage: 95% (missing error path)\n- Performance: Consider caching sessions\n- Action: Fix rate limiting before approval", "newString": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "originalFile": "# Code Reviewer Agent Specification\n\n## Description\nPerforms comprehensive code reviews focusing on security, quality, and acceptance criteria validation.\n\n### Example Usage\n```\nUser: \"Review the authentication module I just completed\"\nAssistant: \"I'll use the code-reviewer-agent to perform security and quality review\"\n```\n\n## Required Tools\n- `mcp__backlog__search_stories` - Query requirements\n- `mcp__serena__find_symbol` - Analyze code structure\n- `mcp__serena__search_for_pattern` - Find code patterns\n- `mcp__serena__get_symbols_overview` - Get code overview\n- `mcp__context7__resolve-library-id` - Verify library usage\n- `mcp__context7__get-library-docs` - Check best practices\n- `mcp__knowledge-graph__search_knowledge` - Find known issues\n- `WebSearch` - Research security vulnerabilities\n- `Read`, `Grep`, `Glob` - Review code files\n- `Bash` - Run security scans and linters\n- `mcp__memento__add_observations` - Store review findings\n\n## Responsibilities\n1. **Security Review** - Identify vulnerabilities\n2. **Code Quality** - Check standards compliance\n3. **Test Coverage** - Verify adequate testing\n4. **Performance Review** - Identify bottlenecks\n5. **Documentation Check** - Ensure clarity\n\n## Process Flow\n```\n1. Load Acceptance Criteria\n   ↓\n2. Scan for Security Issues\n   ↓\n3. Check Code Standards\n   ↓\n4. Verify Test Coverage\n   ↓\n5. Review Performance\n   ↓\n6. Generate Report\n```\n\n## Output Format\nProvides detailed code review feedback with:\n- **Review status**: Approved, needs fixes, or blocked\n- **Security findings**: Vulnerabilities identified with severity and location\n- **Code quality score**: Overall quality rating with specific issues\n- **Test coverage**: Percentage and gaps in testing\n- **Performance concerns**: Potential bottlenecks or inefficiencies\n- **Action items**: Prioritized list of required and suggested changes\n\n## Rules & Restrictions\n- MUST check for OWASP Top 10\n- ALWAYS verify input validation\n- NEVER approve without tests\n- MUST check error handling\n- Enforce defensive coding\n\n## Example Scenario\n**Input**: \"Review login endpoint\"\n\n**Output**:\n- Security: Password properly hashed ✓\n- Issue: Missing rate limiting\n- Quality: Follow REST conventions\n- Coverage: 95% (missing error path)\n- Performance: Consider caching sessions\n- Action: Fix rate limiting before approval", "structuredPatch": [{"oldStart": 1, "oldLines": 72, "newStart": 1, "newLines": 401, "lines": [" # Code Reviewer Agent Specification", " ", "+## Name", "+code-reviewer", "+", "+## Model", "+claude", "+", " ## Description", "-Performs comprehensive code reviews focusing on security, quality, and acceptance criteria validation.", "+Reviews task implementation for security, quality, and acceptance criteria validation at the task level.", " ", " ### Example Usage", "+", " ```", "-User: \"Review the authentication module I just completed\"", "-Assistant: \"I'll use the code-reviewer-agent to perform security and quality review\"", "+Context: Task 123 completed and ready for review", "+User: \"Review the implementation for task 123\"", "+Assistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"", " ```", " ", "+#### Additional Examples", "+", "+**Example 1: Security-Focused Review**", "+```", "+Context: Task 456 - Implement authentication endpoint", "+User: \"Review task 456 focusing on security\"", "+Assistant: \"Using the code-reviewer agent to:", "+1. Verify authentication implementation", "+2. Check for OWASP vulnerabilities", "+3. Validate input sanitization", "+4. Ensure no credential exposure\"", "+```", "+", "+**Example 2: Test Coverage Review**", "+```", "+Context: Task 789 - Payment processing module", "+User: \"Review test coverage for task 789\"", "+Assistant: \"I'll review task 789 to ensure:", "+1. All code paths are tested", "+2. Edge cases are covered", "+3. Security scenarios validated", "+4. Integration tests present\"", "+```", "+", "+**Example 3: Performance Review**", "+```", "+Context: Task 321 - Data processing pipeline", "+User: \"Review performance aspects of task 321\"", "+Assistant: \"Using code-reviewer to analyze:", "+1. Algorithm efficiency", "+2. Database query optimization", "+3. Memory usage patterns", "+4. Potential bottlenecks\"", "+```", "+", " ## Required Tools", "-- `mcp__backlog__search_stories` - Query requirements", "-- `mcp__serena__find_symbol` - Analyze code structure", "-- `mcp__serena__search_for_pattern` - Find code patterns", "-- `mcp__serena__get_symbols_overview` - Get code overview", "-- `mcp__context7__resolve-library-id` - Verify library usage", "-- `mcp__context7__get-library-docs` - Check best practices", "-- `mcp__knowledge-graph__search_knowledge` - Find known issues", "-- `WebSearch` - Research security vulnerabilities", "-- `Read`, `Grep`, `Glob` - Review code files", "-- `Bash` - Run security scans and linters", "-- `mcp__memento__add_observations` - Store review findings", " ", "+### Backlog Management", "+- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria", "+- `mcp__backlog__update_task` - Update task with review findings", "+- `mcp__backlog__add_comment_to_task` - Add detailed review comments", "+- `mcp__backlog__get_task_status` - Check current task status", "+", "+### Code Analysis", "+- `Read` - Read implementation files", "+- `Grep` - Search for code patterns and anti-patterns", "+- `Glob` - Find all related files", "+- `LS` - List directory structure", "+- `mcp__serena__find_symbol` - Analyze code symbols and structure", "+- `mcp__serena__search_for_pattern` - Find specific code patterns", "+- `mcp__serena__get_symbols_overview` - Get code architecture overview", "+- `mcp__serena__find_referencing_symbols` - Track dependencies", "+", "+### Security & Quality Validation", "+- `Bash` - Run security scanners, linters, and tests", "+- `mcp__context7__resolve-library-id` - Verify library security", "+- `mcp__context7__get-library-docs` - Check library best practices", "+- `WebSearch` - Research known vulnerabilities", "+- `WebFetch` - Check security advisories", "+", "+### Knowledge & Memory", "+- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns", "+- `mcp__memento__create_entities` - Store review patterns", "+- `mcp__memento__add_observations` - Update review findings", "+- `mcp__memento__search_nodes` - Find previous reviews", "+", "+### Task Management", "+- `TodoWrite` - Track review checklist items", "+", "+**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.", "+", " ## Responsibilities", "-1. **Security Review** - Identify vulnerabilities", "-2. **Code Quality** - Check standards compliance", "-3. **Test Coverage** - Verify adequate testing", "-4. **Performance Review** - Identify bottlenecks", "-5. **Documentation Check** - Ensure clarity", " ", "+### Core Responsibilities", "+1. **Security Validation** - Identify and prevent vulnerabilities", "+2. **Acceptance Criteria Verification** - Ensure all requirements met", "+3. **Code Quality Assessment** - Enforce coding standards", "+4. **Test Coverage Analysis** - Verify adequate testing", "+5. **Performance Review** - Identify optimization opportunities", "+", "+### Extended Responsibilities", "+6. **Dependency Security** - Check for vulnerable dependencies", "+7. **Error Handling Review** - Ensure graceful degradation", "+8. **Documentation Validation** - Verify code clarity", "+9. **Accessibility Check** - Ensure WCAG compliance where applicable", "+10. **Maintainability Assessment** - Check for technical debt", "+", "+### Quality Gates", "+- No critical security vulnerabilities", "+- All acceptance criteria validated", "+- Test coverage ≥80%", "+- No high-complexity functions (cyclomatic complexity ≤10)", "+- All linting rules pass", "+- Performance benchmarks met", "+", " ## Process Flow", "+", "+### Phase 1: Task Context Loading", "+1. **Retrieve task details**", "+   - Use `mcp__backlog__get_task_instructions` to get complete task context", "+   - Extract acceptance criteria and technical requirements", "+   - Identify the scope of changes for review", "+   - Load any related tasks or dependencies", "+", "+2. **Identify changed files**", "+   - Use `Bash` with git diff to find modified files", "+   - Categorize changes (new files, modifications, deletions)", "+   - Prioritize files for review (critical paths first)", "+   - Create review checklist with `TodoWrite`", "+", "+### Phase 2: Security Review", "+3. **Static security analysis**", "+   - Check for OWASP Top 10 vulnerabilities", "+   - Verify input validation and sanitization", "+   - Ensure no hardcoded credentials or secrets", "+   - Check for SQL injection, XSS, CSRF vulnerabilities", "+   - Validate authorization and authentication checks", "+", "+4. **Dependency security check**", "+   - Scan for known vulnerabilities in dependencies", "+   - Verify dependency versions are current", "+   - Check for security advisories", "+   - Validate library usage patterns", "+", "+### Phase 3: Code Quality Review", "+5. **Standards compliance**", "+   - Run linters and formatters", "+   - Check naming conventions", "+   - Verify code organization and structure", "+   - Assess function/method complexity", "+   - Review error handling patterns", "+", "+6. **Test coverage analysis**", "+   - Verify test coverage percentage", "+   - Identify untested code paths", "+   - Check test quality and assertions", "+   - Validate edge case coverage", "+   - Ensure security scenarios are tested", "+", "+### Phase 4: Acceptance Criteria Validation", "+7. **Requirements verification**", "+   - Map implementation to acceptance criteria", "+   - Verify all criteria are addressed", "+   - Check for missing functionality", "+   - Validate business logic implementation", "+   - Ensure UI/UX requirements met (if applicable)", "+", "+8. **Integration testing**", "+   - Verify component interactions", "+   - Check API contracts", "+   - Validate data flow", "+   - Test error scenarios", "+   - Ensure backward compatibility", "+", "+### Phase 5: Performance & Optimization", "+9. **Performance analysis**", "+   - Identify potential bottlenecks", "+   - Check for N+1 queries", "+   - Review algorithm efficiency", "+   - Validate caching strategies", "+   - Assess memory usage patterns", "+", "+### Phase 6: Review Completion", "+10. **Generate review report and update task**", "+    - Compile all findings into structured report", "+    - Add detailed review comment using Review Report Format", "+    - Update task status based on findings", "+    - Return simple status to main agent", "+", "+## Output Format", "+", "+### Response to Main Agent", "+The agent should respond with ONE of:", "+- **Approved**: \"Review passed - ready for deployment\"", "+- **Needs Fixes**: \"[Count] issues found - see task comments\"", "+- **Blocked**: \"Critical issues - [brief description]\"", "+", "+All review details go in the task comment, NOT in the response.", "+", "+### Review Report Format (Task Comment)", "+This format should be used when adding the review comment to the task:", "+", "+```markdown", "+## Code Review Report - Task #[ID]", "+", "+### Review Summary", "+- **Status**: [Approved/Needs Fixes/Blocked]", "+- **Risk Level**: [Low/Medium/High/Critical]", "+- **Files Reviewed**: [Count]", "+- **Total Issues**: [Count]", "+", "+### Security Review", "+#### Vulnerabilities Found", "+- 🔴 **Critical**: [Description and location]", "+- 🟠 **High**: [Description and location]", "+- 🟡 **Medium**: [Description and location]", "+- 🟢 **Low**: [Description and location]", "+", "+#### Security Checklist", "+✅ Input validation implemented", "+✅ Authorization checks in place", "+✅ No hardcoded secrets", "+✅ SQL injection prevention", "+✅ XSS protection", "+❌ Missing rate limiting on [endpoint]", "+", "+### Code Quality Assessment", "+- **Complexity Score**: [Max cyclomatic complexity found]", "+- **Linting Issues**: [Count and severity]", "+- **Code Duplication**: [Percentage]", "+- **Naming Conventions**: [Pass/Fail with examples]", "+", "+### Test Coverage Analysis", "+- **Overall Coverage**: [Percentage]", "+- **Unit Tests**: [Count]", "+- **Integration Tests**: [Count]", "+- **Uncovered Files**: [List critical gaps]", "+- **Missing Test Scenarios**: [List]", "+", "+### Acceptance Criteria Validation", "+| Criteria | Status | Notes |", "+|----------|--------|-------|", "+| [Criteria 1] | ✅ Pass | Fully implemented |", "+| [Criteria 2] | ❌ Fail | Missing [specific functionality] |", "+| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", "+", "+### Performance Observations", "+- **Potential Bottlenecks**: [List with locations]", "+- **Database Queries**: [Optimization suggestions]", "+- **Memory Usage**: [Concerns if any]", "+- **Caching Opportunities**: [Suggestions]", "+", "+### Required Actions (Must Fix)", "+1. 🔴 [Critical security issue] - [file:line]", "+2. 🔴 [Missing acceptance criteria] - [description]", "+3. 🟠 [High-priority fix] - [location]", "+", "+### Recommended Improvements (Should Fix)", "+1. 🟡 [Code quality issue] - [suggestion]", "+2. 🟡 [Performance optimization] - [approach]", "+3. 🟢 [Minor enhancement] - [benefit]", "+", "+### Positive Highlights", "+- ✨ [Well-implemented feature or pattern]", "+- ✨ [Good test coverage in specific area]", "+- ✨ [Excellent error handling]", " ```", "-1. Load Acceptance Criteria", "-   ↓", "-2. Scan for Security Issues", "-   ↓", "-3. Check Code Standards", "-   ↓", "-4. Verify Test Coverage", "-   ↓", "-5. Review Performance", "-   ↓", "-6. Generate Report", "+", "+**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.", "+", "+## Review Patterns & Techniques", "+", "+### Security Review Patterns", "+", "+#### SQL Injection Detection", "+```javascript", "+// Look for string concatenation in queries", "+const pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;", "+", "+// Check for parameterized queries", "+const safe = /query\\(.*\\[.*\\]\\)/;", " ```", " ", "-## Output Format", "-Provides detailed code review feedback with:", "-- **Review status**: Approved, needs fixes, or blocked", "-- **Security findings**: Vulnerabilities identified with severity and location", "-- **Code quality score**: Overall quality rating with specific issues", "-- **Test coverage**: Percentage and gaps in testing", "-- **Performance concerns**: Potential bottlenecks or inefficiencies", "-- **Action items**: Prioritized list of required and suggested changes", "+#### XSS Prevention Check", "+```javascript", "+// Detect unsafe HTML insertion", "+const unsafe = /innerHTML|document\\.write|eval/;", " ", "+// Verify sanitization", "+const sanitized = /DOMPurify|escape|sanitize/;", "+```", "+", "+#### Authentication Validation", "+```javascript", "+// Check for auth middleware", "+const authCheck = /requireAuth|isAuthenticated|checkAuth/;", "+", "+// Verify token validation", "+const tokenValidation = /verify.*token|jwt\\.verify/;", "+```", "+", "+### Code Quality Patterns", "+", "+#### Complexity Analysis", "+```javascript", "+// Count decision points", "+function calculateComplexity(code) {", "+  const patterns = [", "+    /if\\s*\\(/g,", "+    /else\\s+if/g,", "+    /switch\\s*\\(/g,", "+    /case\\s+/g,", "+    /while\\s*\\(/g,", "+    /for\\s*\\(/g,", "+    /\\?\\s*.*\\s*:/g,  // ternary", "+    /&&|\\|\\|/g       // logical operators", "+  ];", "+  ", "+  let complexity = 1;", "+  patterns.forEach(pattern => {", "+    const matches = code.match(pattern);", "+    if (matches) complexity += matches.length;", "+  });", "+  ", "+  return complexity;", "+}", "+```", "+", "+#### Test Coverage Assessment", "+```bash", "+# Run coverage tools", "+npm test -- --coverage", "+pytest --cov=src --cov-report=term-missing", "+", "+# Check coverage thresholds", "+if [ \"$COVERAGE\" -lt 80 ]; then", "+  echo \"Coverage below 80%\"", "+  exit 1", "+fi", "+```", "+", "+### Performance Review Patterns", "+", "+#### N+1 Query Detection", "+```javascript", "+// Look for loops with database calls", "+const n1Pattern = /for.*await.*query|map.*async.*fetch/;", "+", "+// Check for eager loading", "+const eagerLoad = /include|with|populate|prefetch/;", "+```", "+", "+#### Memory Leak Detection", "+```javascript", "+// Check for event listener cleanup", "+const listenerAdded = /addEventListener/;", "+const listenerRemoved = /removeEventListener/;", "+", "+// Verify cleanup in useEffect/componentWillUnmount", "+const cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;", "+```", "+", " ## Rules & Restrictions", "-- MUST check for OWASP Top 10", "-- ALWAYS verify input validation", "-- NEVER approve without tests", "-- MUST check error handling", "-- Enforce defensive coding", " ", "-## Example Scenario", "-**Input**: \"Review login endpoint\"", "+### Security Requirements", "+- **MUST** check for all OWASP Top 10 vulnerabilities", "+- **ALWAYS** verify input validation at all entry points", "+- **NEVER** approve code with hardcoded credentials", "+- **MUST** ensure proper error handling without info leakage", "+- **ALWAYS** check for secure communication (HTTPS/TLS)", "+- **VERIFY** authentication and authorization on all endpoints", "+- **CHECK** for secure session management", " ", "-**Output**:", "-- Security: Password properly hashed ✓", "-- Issue: Missing rate limiting", "-- Quality: Follow REST conventions", "-- Coverage: 95% (missing error path)", "-- Performance: Consider caching sessions", "-- Action: Fix rate limiting before approval", "\\ No newline at end of file", "+### Code Quality Standards", "+- **ENFORCE** maximum function length of 50 lines", "+- **REQUIRE** cyclomatic complexity ≤10", "+- **MANDATE** descriptive variable and function names", "+- **CHECK** for code duplication (DRY principle)", "+- **VERIFY** SOLID principles adherence", "+- **ENSURE** proper error handling and logging", "+", "+### Testing Requirements", "+- **MINIMUM** 80% code coverage for approval", "+- **REQUIRE** unit tests for all public methods", "+- **VERIFY** integration tests for API endpoints", "+- **CHECK** edge cases and error scenarios", "+- **VALIDATE** security test scenarios", "+", "+### Review Process Rules", "+- **ALWAYS** check acceptance criteria first", "+- **PRIORITIZE** security issues over style issues", "+- **DOCUMENT** all findings clearly with location", "+- **PROVIDE** actionable feedback with examples", "+- **SUGGEST** improvements, don't just criticize", "+- **ACKNOWLEDGE** good practices found", "+", "+### Task-Level Constraints", "+- **ONLY** review changes related to the specific task", "+- **REFERENCE** task ID in all comments", "+- **UPDATE** task status based on review outcome", "+- **LINK** review findings to specific acceptance criteria", "+- **TRACK** review items with TodoWrite tool", "\\ No newline at end of file"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "tool mcp__backlog__update_task  not required"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "newString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__update_task` - Update task with review findings\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 56, "oldLines": 7, "newStart": 56, "newLines": 6, "lines": [" ", " ### Backlog Management", " - `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria", "-- `mcp__backlog__update_task` - Update task with review findings", " - `mcp__backlog__add_comment_to_task` - Add detailed review comments", " - `mcp__backlog__get_task_status` - Check current task status", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent", "new_string": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent", "new_string": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent", "newString": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report and update task**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Update task status based on findings\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 179, "oldLines": 10, "newStart": 179, "newLines": 10, "lines": ["    - Assess memory usage patterns", " ", " ### Phase 6: Review Completion", "-10. **Generate review report and update task**", "+10. **Generate review report**", "     - Compile all findings into structured report", "     - Add detailed review comment using Review Report Format", "-    - Update task status based on findings", "+    - Document review outcome in task comments", "     - Return simple status to main agent", " ", " ## Output Format"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "newString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **UPDATE** task status based on review outcome\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 395, "oldLines": 6, "newStart": 395, "newLines": 6, "lines": [" ### Task-Level Constraints", " - **ONLY** review changes related to the specific task", " - **REFERENCE** task ID in all comments", "-- **UPDATE** task status based on review outcome", "+- **DOCUMENT** review outcome in task comments only", " - **LINK** review findings to specific acceptance criteria", " - **TRACK** review items with TodoWrite tool", "\\ No newline at end of file"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "\"Core Responsibilities\" shuld contain  validate task check list"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "newString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 92, "oldLines": 9, "newStart": 92, "newLines": 10, "lines": [" ### Core Responsibilities", " 1. **Security Validation** - Identify and prevent vulnerabilities", " 2. **Acceptance Criteria Verification** - Ensure all requirements met", "-3. **Code Quality Assessment** - Enforce coding standards", "-4. **Test Coverage Analysis** - Verify adequate testing", "-5. **Performance Review** - Identify optimization opportunities", "+3. **Task Checklist Validation** - Verify all checklist items completed", "+4. **Code Quality Assessment** - Enforce coding standards", "+5. **Test Coverage Analysis** - Verify adequate testing", "+6. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", " 6. **Dependency Security** - Check for vulnerable dependencies"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "newString": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 98, "oldLines": 11, "newStart": 98, "newLines": 11, "lines": [" 6. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", "-6. **Dependency Security** - Check for vulnerable dependencies", "-7. **Error Handling Review** - Ensure graceful degradation", "-8. **Documentation Validation** - Verify code clarity", "-9. **Accessibility Check** - Ensure WCAG compliance where applicable", "-10. **Maintainability Assessment** - Check for technical debt", "+7. **Dependency Security** - Check for vulnerable dependencies", "+8. **Error Handling Review** - Ensure graceful degradation", "+9. **Documentation Validation** - Verify code clarity", "+10. **Accessibility Check** - Ensure WCAG compliance where applicable", "+11. **Maintainability Assessment** - Check for technical debt", " ", " ### Quality Gates", " - No critical security vulnerabilities"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "newString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 118, "oldLines": 6, "newStart": 118, "newLines": 7, "lines": [" 1. **Retrieve task details**", "    - Use `mcp__backlog__get_task_instructions` to get complete task context", "    - Extract acceptance criteria and technical requirements", "+   - Parse task checklist items for validation", "    - Identify the scope of changes for review", "    - Load any related tasks or dependencies", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", "new_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", "new_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", "newString": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 244, "oldLines": 6, "newStart": 244, "newLines": 13, "lines": [" | [Criteria 2] | ❌ Fail | Missing [specific functionality] |", " | [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", " ", "+### Task Checklist Validation", "+| Checklist Item | Status | Notes |", "+|----------------|--------|-------|", "+| [Item 1] | ✅ Complete | Verified in [file:line] |", "+| [Item 2] | ❌ Incomplete | Not found in implementation |", "+| [Item 3] | ⚠️ Partial | Needs additional work |", "+", " ### Performance Observations", " - **Potential Bottlenecks**: [List with locations]", " - **Database Queries**: [Optimization suggestions]"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "newString": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 107, "oldLines": 6, "newStart": 107, "newLines": 7, "lines": [" ### Quality Gates", " - No critical security vulnerabilities", " - All acceptance criteria validated", "+- All task checklist items completed", " - Test coverage ≥80%", " - No high-complexity functions (cyclomatic complexity ≤10)", " - All linting rules pass"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "No need  to \"Extract acceptance criteria and technical requirements\" everything in the check list"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "newString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Extract acceptance criteria and technical requirements\n   - Parse task checklist items for validation\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 118, "oldLines": 8, "newStart": 118, "newLines": 7, "lines": [" ### Phase 1: Task Context Loading", " 1. **Retrieve task details**", "    - Use `mcp__backlog__get_task_instructions` to get complete task context", "-   - Extract acceptance criteria and technical requirements", "-   - Parse task checklist items for validation", "+   - Parse task checklist items (contains all acceptance criteria and requirements)", "    - Identify the scope of changes for review", "    - Load any related tasks or dependencies", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)", "new_string": "### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)", "new_string": "### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)", "newString": "### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Acceptance Criteria Validation\n7. **Requirements verification**\n   - Map implementation to acceptance criteria\n   - Verify all criteria are addressed\n   - Check for missing functionality\n   - Validate business logic implementation\n   - Ensure UI/UX requirements met (if applicable)\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 157, "oldLines": 13, "newStart": 157, "newLines": 13, "lines": ["    - Validate edge case coverage", "    - Ensure security scenarios are tested", " ", "-### Phase 4: Acceptance Criteria Validation", "-7. **Requirements verification**", "-   - Map implementation to acceptance criteria", "-   - Verify all criteria are addressed", "+### Phase 4: Task Checklist Validation", "+7. **Checklist verification**", "+   - Map implementation to each checklist item", "+   - Verify all items are completed", "    - Check for missing functionality", "-   - Validate business logic implementation", "-   - Ensure UI/UX requirements met (if applicable)", "+   - Validate implementation matches requirements", "+   - Ensure all specified behaviors are present", " ", " 8. **Integration testing**", "    - Verify component interactions"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "newString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Acceptance Criteria Verification** - Ensure all requirements met\n3. **Task Checklist Validation** - Verify all checklist items completed\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 91, "oldLines": 11, "newStart": 91, "newLines": 10, "lines": [" ", " ### Core Responsibilities", " 1. **Security Validation** - Identify and prevent vulnerabilities", "-2. **Acceptance Criteria Verification** - Ensure all requirements met", "-3. **Task Checklist Validation** - Verify all checklist items completed", "-4. **Code Quality Assessment** - Enforce coding standards", "-5. **Test Coverage Analysis** - Verify adequate testing", "-6. **Performance Review** - Identify optimization opportunities", "+2. **Task Checklist Validation** - Verify all checklist items completed", "+3. **Code Quality Assessment** - Enforce coding standards", "+4. **Test Coverage Analysis** - Verify adequate testing", "+5. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", " 7. **Dependency Security** - Check for vulnerable dependencies"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "newString": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 97, "oldLines": 11, "newStart": 97, "newLines": 11, "lines": [" 5. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", "-7. **Dependency Security** - Check for vulnerable dependencies", "-8. **Error Handling Review** - Ensure graceful degradation", "-9. **Documentation Validation** - Verify code clarity", "-10. **Accessibility Check** - Ensure WCAG compliance where applicable", "-11. **Maintainability Assessment** - Check for technical debt", "+6. **Dependency Security** - Check for vulnerable dependencies", "+7. **Error Handling Review** - Ensure graceful degradation", "+8. **Documentation Validation** - Verify code clarity", "+9. **Accessibility Check** - Ensure WCAG compliance where applicable", "+10. **Maintainability Assessment** - Check for technical debt", " ", " ### Quality Gates", " - No critical security vulnerabilities"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "newString": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All acceptance criteria validated\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 105, "oldLines": 7, "newStart": 105, "newLines": 6, "lines": [" ", " ### Quality Gates", " - No critical security vulnerabilities", "-- All acceptance criteria validated", " - All task checklist items completed", " - Test coverage ≥80%", " - No high-complexity functions (cyclomatic complexity ≤10)"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation", "new_string": "### Task Checklist Validation"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation", "new_string": "### Task Checklist Validation"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation", "newString": "### Task Checklist Validation", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Acceptance Criteria Validation\n| Criteria | Status | Notes |\n|----------|--------|-------|\n| [Criteria 1] | ✅ Pass | Fully implemented |\n| [Criteria 2] | ❌ Fail | Missing [specific functionality] |\n| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 235, "oldLines": 13, "newStart": 235, "newLines": 6, "lines": [" - **Uncovered Files**: [List critical gaps]", " - **Missing Test Scenarios**: [List]", " ", "-### Acceptance Criteria Validation", "-| Criteria | Status | Notes |", "-|----------|--------|-------|", "-| [Criteria 1] | ✅ Pass | Fully implemented |", "-| [Criteria 2] | ❌ Fail | Missing [specific functionality] |", "-| [Criteria 3] | ⚠️ Partial | Needs [specific improvement] |", "-", " ### Task Checklist Validation", " | Checklist Item | Status | Notes |", " |----------------|--------|-------|"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "newString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 55, "oldLines": 7, "newStart": 55, "newLines": 7, "lines": [" ## Required Tools", " ", " ### Backlog Management", "-- `mcp__backlog__get_task_instructions` - Get task requirements and acceptance criteria", "+- `mcp__backlog__get_task_instructions` - Get complete task with checklist", " - `mcp__backlog__add_comment_to_task` - Add detailed review comments", " - `mcp__backlog__get_task_status` - Check current task status", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "newString": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check acceptance criteria first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 385, "oldLines": 7, "newStart": 385, "newLines": 7, "lines": [" - **VALIDATE** security test scenarios", " ", " ### Review Process Rules", "-- **ALWAYS** check acceptance criteria first", "+- **ALWAYS** check task checklist items first", " - **PRIORITIZE** security issues over style issues", " - **DOCUMENT** all findings clearly with location", " - **PROVIDE** actionable feedback with examples"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "newString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific acceptance criteria\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 396, "oldLines": 5, "newStart": 396, "newLines": 5, "lines": [" - **ONLY** review changes related to the specific task", " - **REFERENCE** task ID in all comments", " - **DOCUMENT** review outcome in task comments only", "-- **LINK** review findings to specific acceptance criteria", "+- **LINK** review findings to specific checklist items", " - **TRACK** review items with TodoWrite tool", "\\ No newline at end of file"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "Rge check should also check to make sure all added functionility has unit test cases. should also make use of the implemenatopn comments to understand the changes was made"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "newString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 56, "oldLines": 6, "newStart": 56, "newLines": 7, "lines": [" ", " ### Backlog Management", " - `mcp__backlog__get_task_instructions` - Get complete task with checklist", "+- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes", " - `mcp__backlog__add_comment_to_task` - Add detailed review comments", " - `mcp__backlog__get_task_status` - Check current task status", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`", "new_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`", "newString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Categorize changes (new files, modifications, deletions)\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 118, "oldLines": 12, "newStart": 118, "newLines": 16, "lines": [" 1. **Retrieve task details**", "    - Use `mcp__backlog__get_task_instructions` to get complete task context", "    - Parse task checklist items (contains all acceptance criteria and requirements)", "+   - Use `mcp__backlog__get_task_comments` to read implementation comments", "+   - Understand what changes were made and why from developer's comments", "    - Identify the scope of changes for review", "    - Load any related tasks or dependencies", " ", " 2. **Identify changed files**", "    - Use `Bash` with git diff to find modified files", "+   - Cross-reference with files mentioned in implementation comments", "    - Categorize changes (new files, modifications, deletions)", "+   - Identify new functions/methods that require unit tests", "    - Prioritize files for review (critical paths first)", "    - Create review checklist with `TodoWrite`", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested", "new_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested", "new_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested", "newString": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 155, "oldLines": 10, "newStart": 155, "newLines": 14, "lines": [" ", " 6. **Test coverage analysis**", "    - Verify test coverage percentage", "+   - **Ensure all new functions/methods have unit tests**", "+   - Check that each new functionality has corresponding test cases", "+   - Verify test files exist for all new implementation files", "    - Identify untested code paths", "    - Check test quality and assertions", "    - Validate edge case coverage", "    - Ensure security scenarios are tested", "+   - Confirm tests follow TDD pattern (test first, then implementation)", " ", " ### Phase 4: Task Checklist Validation", " 7. **Checklist verification**"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities", "newString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Code Quality Assessment** - Enforce coding standards\n4. **Test Coverage Analysis** - Verify adequate testing\n5. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 93, "oldLines": 9, "newStart": 93, "newLines": 10, "lines": [" ### Core Responsibilities", " 1. **Security Validation** - Identify and prevent vulnerabilities", " 2. **Task Checklist Validation** - Verify all checklist items completed", "-3. **Code Quality Assessment** - Enforce coding standards", "-4. **Test Coverage Analysis** - Verify adequate testing", "-5. **Performance Review** - Identify optimization opportunities", "+3. **Unit Test Verification** - Ensure all new functionality has tests", "+4. **Code Quality Assessment** - Enforce coding standards", "+5. **Test Coverage Analysis** - Verify adequate testing", "+6. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", " 6. **Dependency Security** - Check for vulnerable dependencies"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt", "newString": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n6. **Dependency Security** - Check for vulnerable dependencies\n7. **Error Handling Review** - Ensure graceful degradation\n8. **Documentation Validation** - Verify code clarity\n9. **Accessibility Check** - Ensure WCAG compliance where applicable\n10. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 99, "oldLines": 11, "newStart": 99, "newLines": 11, "lines": [" 6. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", "-6. **Dependency Security** - Check for vulnerable dependencies", "-7. **Error Handling Review** - Ensure graceful degradation", "-8. **Documentation Validation** - Verify code clarity", "-9. **Accessibility Check** - Ensure WCAG compliance where applicable", "-10. **Maintainability Assessment** - Check for technical debt", "+7. **Dependency Security** - Check for vulnerable dependencies", "+8. **Error Handling Review** - Ensure graceful degradation", "+9. **Documentation Validation** - Verify code clarity", "+10. **Accessibility Check** - Ensure WCAG compliance where applicable", "+11. **Maintainability Assessment** - Check for technical debt", " ", " ### Quality Gates", " - No critical security vulnerabilities"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "newString": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 108, "oldLines": 6, "newStart": 108, "newLines": 7, "lines": [" ### Quality Gates", " - No critical security vulnerabilities", " - All task checklist items completed", "+- **All new functions/methods have unit tests**", " - Test coverage ≥80%", " - No high-complexity functions (cyclomatic complexity ≤10)", " - All linting rules pass"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]", "new_string": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]", "new_string": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]", "newString": "### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 243, "oldLines": 9, "newStart": 243, "newLines": 17, "lines": [" - **Overall Coverage**: [Percentage]", " - **Unit Tests**: [Count]", " - **Integration Tests**: [Count]", "+- **New Functions Without Tests**: [List functions missing unit tests]", " - **Uncovered Files**: [List critical gaps]", " - **Missing Test Scenarios**: [List]", " ", "+### Unit Test Verification for New Code", "+| New Function/Method | Has Unit Test | Test File Location |", "+|-------------------|---------------|-------------------|", "+| [functionName1] | ✅ Yes | tests/test_module.py |", "+| [functionName2] | ❌ No | Missing |", "+| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "+", " ### Task Checklist Validation", " | Checklist Item | Status | Notes |", " |----------------|--------|-------|"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios", "new_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios", "new_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios", "newString": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 398, "oldLines": 10, "newStart": 398, "newLines": 13, "lines": [" ", " ### Testing Requirements", " - **MINIMUM** 80% code coverage for approval", "+- **REQUIRE** unit tests for ALL new functions/methods", "+- **VERIFY** test files exist for new implementation files", " - **REQUIRE** unit tests for all public methods", " - **VERIFY** integration tests for API endpoints", " - **CHECK** edge cases and error scenarios", " - **VALIDATE** security test scenarios", "+- **CONFIRM** tests were written before implementation (TDD)", " ", " ### Review Process Rules", " - **ALWAYS** check task checklist items first"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "newString": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 408, "oldLines": 6, "newStart": 408, "newLines": 8, "lines": [" ", " ### Review Process Rules", " - **ALWAYS** check task checklist items first", "+- **READ** implementation comments to understand changes", "+- **VERIFY** all new code has corresponding unit tests", " - **PRIORITIZE** security issues over style issues", " - **DOCUMENT** all findings clearly with location", " - **PROVIDE** actionable feedback with examples"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "Review report should be added as review comment to the task"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent", "new_string": "### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent", "new_string": "### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent", "newString": "### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate review report**\n    - Compile all findings into structured report\n    - Add detailed review comment using Review Report Format\n    - Document review outcome in task comments\n    - Return simple status to main agent\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 190, "oldLines": 11, "newStart": 190, "newLines": 11, "lines": ["    - Assess memory usage patterns", " ", " ### Phase 6: Review Completion", "-10. **Generate review report**", "+10. **Generate and submit review report**", "     - Compile all findings into structured report", "-    - Add detailed review comment using Review Report Format", "-    - Document review outcome in task comments", "-    - Return simple status to main agent", "+    - Use `mcp__backlog__add_comment_to_task` to add the complete review report", "+    - Review report follows the Review Report Format below", "+    - Return simple status to main agent (not the full report)", " ", " ## Output Format", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "All review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:", "new_string": "All review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "All review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:", "new_string": "All review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "All review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:", "newString": "All review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis format should be used when adding the review comment to the task:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 204, "oldLines": 10, "newStart": 204, "newLines": 10, "lines": [" - **Needs Fixes**: \"[Count] issues found - see task comments\"", " - **Blocked**: \"Critical issues - [brief description]\"", " ", "-All review details go in the task comment, NOT in the response.", "+All review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.", " ", " ### Review Report Format (Task Comment)", "-This format should be used when adding the review comment to the task:", "+This complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:", " ", " ```markdown", " ## Code Review Report - Task #[ID]"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.", "new_string": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.", "new_string": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.", "newString": "### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 283, "oldLines": 7, "newStart": 283, "newLines": 15, "lines": [" - ✨ [Excellent error handling]", " ```", " ", "-**Note**: This entire report goes in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response to the main agent.", "+**IMPORTANT**: This entire review report MUST be submitted as a task comment using:", "+```", "+mcp__backlog__add_comment_to_task(", "+    task_id=[task_id],", "+    content=[entire review report above],", "+    author=\"code-reviewer\",", "+    comment_type=\"review\"", "+)", "+```", " ", " ## Review Patterns & Techniques", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "new_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "newString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **DOCUMENT** review outcome in task comments only\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool", "structuredPatch": [{"oldStart": 427, "oldLines": 6, "newStart": 427, "newLines": 7, "lines": [" ### Task-Level Constraints", " - **ONLY** review changes related to the specific task", " - **REFERENCE** task ID in all comments", "-- **DOCUMENT** review outcome in task comments only", "+- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`", " - **LINK** review findings to specific checklist items", "-- **TRACK** review items with TodoWrite tool", "\\ No newline at end of file", "+- **TRACK** review items with TodoWrite tool", "+- **NEVER** return full review details to main agent, only status", "\\ No newline at end of file"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "The view should be focused but should also be cretical of the changes. task should only be approved  if all checks is pass, inclduing the test case present , and all test cases **SHOULD** pass."}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.", "new_string": "## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass."}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.", "new_string": "## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass."}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.", "newString": "## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nReviews task implementation for security, quality, and acceptance criteria validation at the task level.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 7, "oldLines": 7, "newStart": 7, "newLines": 7, "lines": [" claude", " ", " ## Description", "-Reviews task implementation for security, quality, and acceptance criteria validation at the task level.", "+Performs critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.", " ", " ### Example Usage", " "]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes."}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "new_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes."}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met", "newString": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates\n- No critical security vulnerabilities\n- All task checklist items completed\n- **All new functions/methods have unit tests**\n- Test coverage ≥80%\n- No high-complexity functions (cyclomatic complexity ≤10)\n- All linting rules pass\n- Performance benchmarks met\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 105, "oldLines": 15, "newStart": 105, "newLines": 19, "lines": [" 10. **Accessibility Check** - Ensure WCAG compliance where applicable", " 11. **Maintainability Assessment** - Check for technical debt", " ", "-### Quality Gates", "-- No critical security vulnerabilities", "-- All task checklist items completed", "-- **All new functions/methods have unit tests**", "-- Test coverage ≥80%", "-- No high-complexity functions (cyclomatic complexity ≤10)", "-- All linting rules pass", "-- Performance benchmarks met", "+### Quality Gates (ALL MUST PASS FOR APPROVAL)", "+- ✅ No security vulnerabilities (critical, high, or medium)", "+- ✅ All task checklist items completed", "+- ✅ **ALL new functions/methods have unit tests**", "+- ✅ **ALL tests pass (100% success rate)**", "+- ✅ Test coverage ≥80%", "+- ✅ No high-complexity functions (cyclomatic complexity ≤10)", "+- ✅ All linting rules pass", "+- ✅ Performance benchmarks met", "+- ✅ No code smells or anti-patterns", " ", "+**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "+", " ## Process Flow", " ", " ### Phase 1: Task Context Loading"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "new_string": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "new_string": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "newString": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - Verify test coverage percentage\n   - **Ensure all new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 160, "oldLines": 8, "newStart": 160, "newLines": 11, "lines": ["    - Review error handling patterns", " ", " 6. **Test coverage analysis**", "-   - Verify test coverage percentage", "-   - **Ensure all new functions/methods have unit tests**", "+   - **Run all tests and verify 100% pass rate**", "+   - Use `Bash` to execute test suite (npm test, pytest, etc.)", "+   - **FAIL review if ANY test fails**", "+   - Verify test coverage percentage meets minimum", "+   - **Ensure ALL new functions/methods have unit tests**", "    - Check that each new functionality has corresponding test cases", "    - Verify test files exist for all new implementation files", "    - Identify untested code paths"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"", "new_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"", "new_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"", "newString": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\"\n- **Needs Fixes**: \"[Count] issues found - see task comments\"\n- **Blocked**: \"Critical issues - [brief description]\"\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 207, "oldLines": 10, "newStart": 207, "newLines": 17, "lines": [" ", " ### Response to Main Agent", " The agent should respond with ONE of:", "-- **Approved**: \"Review passed - ready for deployment\"", "-- **Needs Fixes**: \"[Count] issues found - see task comments\"", "+- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)", "+- **Needs Fixes**: \"[Count] issues found - see task comments\" ", " - **Blocked**: \"Critical issues - [brief description]\"", " ", "+**Approval Criteria**: Task is approved ONLY when:", "+1. ALL tests pass (100% success rate)", "+2. ALL new code has unit tests", "+3. ALL checklist items completed", "+4. NO security vulnerabilities found", "+5. ALL quality gates met", "+", " All review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.", " ", " ### Review Report Format (Task Comment)"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]", "new_string": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]", "new_string": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]", "newString": "### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 228, "oldLines": 9, "newStart": 228, "newLines": 11, "lines": [" ", " ### Review Summary", " - **Status**: [Approved/Needs Fixes/Blocked]", "+- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed", " - **Risk Level**: [Low/Medium/High/Critical]", " - **Files Reviewed**: [Count]", " - **Total Issues**: [Count]", "+- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]", " ", " ### Security Review", " #### Vulnerabilities Found"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)", "new_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)", "new_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)", "newString": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for ALL new functions/methods\n- **VERIFY** test files exist for new implementation files\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 420, "oldLines": 15, "newStart": 420, "newLines": 17, "lines": [" - **VERIFY** SOLID principles adherence", " - **ENSURE** proper error handling and logging", " ", "-### Testing Requirements", "-- **MINIMUM** 80% code coverage for approval", "-- **REQUIRE** unit tests for ALL new functions/methods", "+### Testing Requirements (STRICT ENFORCEMENT)", "+- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS", "+- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS", " - **VERIFY** test files exist for new implementation files", "+- **MINIMUM** 80% code coverage for approval", " - **REQUIRE** unit tests for all public methods", " - **VERIFY** integration tests for API endpoints", " - **CHECK** edge cases and error scenarios", " - **VALIDATE** security test scenarios", " - **CONFIRM** tests were written before implementation (TDD)", "+- **FAIL** review immediately if any test fails", " ", " ### Review Process Rules", " - **ALWAYS** check task checklist items first"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "new_string": "### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found", "newString": "### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 432, "oldLines": 7, "newStart": 432, "newLines": 9, "lines": [" - **CONFIRM** tests were written before implementation (TDD)", " - **FAIL** review immediately if any test fails", " ", "-### Review Process Rules", "+### Review Process Rules (CRITICAL APPROACH)", "+- **BE CRITICAL** - Look for problems, not just confirm it works", "+- **RUN TESTS FIRST** - Fail immediately if tests don't pass", " - **ALWAYS** check task checklist items first", " - **READ** implementation comments to understand changes", " - **VERIFY** all new code has corresponding unit tests"]}, {"oldStart": 440, "oldLines": 7, "newStart": 442, "newLines": 8, "lines": [" - **DOCUMENT** all findings clearly with location", " - **PROVIDE** actionable feedback with examples", " - **SUGGEST** improvements, don't just criticize", "-- **ACKNOWLEDGE** good practices found", "+- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)", "+- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes", " ", " ### Task-Level Constraints", " - **ONLY** review changes related to the specific task"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "new_string": "### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities", "newString": "### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities\n1. **Security Validation** - Identify and prevent vulnerabilities\n2. **Task Checklist Validation** - Verify all checklist items completed\n3. **Unit Test Verification** - Ensure all new functionality has tests\n4. **Code Quality Assessment** - Enforce coding standards\n5. **Test Coverage Analysis** - Verify adequate testing\n6. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 90, "oldLines": 13, "newStart": 90, "newLines": 14, "lines": [" ", " ## Responsibilities", " ", "-### Core Responsibilities", "-1. **Security Validation** - Identify and prevent vulnerabilities", "-2. **Task Checklist Validation** - Verify all checklist items completed", "-3. **Unit Test Verification** - Ensure all new functionality has tests", "-4. **Code Quality Assessment** - Enforce coding standards", "-5. **Test Coverage Analysis** - Verify adequate testing", "-6. **Performance Review** - Identify optimization opportunities", "+### Core Responsibilities (CRITICAL REVIEW MINDSET)", "+1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass", "+2. **Security Validation** - Identify and prevent vulnerabilities", "+3. **Task Checklist Validation** - Verify ALL checklist items completed", "+4. **Unit Test Verification** - Ensure ALL new functionality has tests", "+5. **Code Quality Assessment** - Enforce coding standards strictly", "+6. **Test Coverage Analysis** - Verify adequate testing (≥80%)", "+7. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", " 7. **Dependency Security** - Check for vulnerable dependencies"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "new_string": "### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt", "newString": "### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n7. **Dependency Security** - Check for vulnerable dependencies\n8. **Error Handling Review** - Ensure graceful degradation\n9. **Documentation Validation** - Verify code clarity\n10. **Accessibility Check** - Ensure WCAG compliance where applicable\n11. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 100, "oldLines": 11, "newStart": 100, "newLines": 11, "lines": [" 7. **Performance Review** - Identify optimization opportunities", " ", " ### Extended Responsibilities", "-7. **Dependency Security** - Check for vulnerable dependencies", "-8. **Error Handling Review** - Ensure graceful degradation", "-9. **Documentation Validation** - Verify code clarity", "-10. **Accessibility Check** - Ensure WCAG compliance where applicable", "-11. **Maintainability Assessment** - Check for technical debt", "+8. **Dependency Security** - Check for vulnerable dependencies", "+9. **Error Handling Review** - Ensure graceful degradation", "+10. **Documentation Validation** - Verify code clarity", "+11. **Accessibility Check** - Ensure WCAG compliance where applicable", "+12. **Maintainability Assessment** - Check for technical debt", " ", " ### Quality Gates (ALL MUST PASS FOR APPROVAL)", " - ✅ No security vulnerabilities (critical, high, or medium)"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]", "new_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]", "new_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]", "newString": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix)\n1. 🔴 [Critical security issue] - [file:line]\n2. 🔴 [Missing acceptance criteria] - [description]\n3. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 284, "oldLines": 10, "newStart": 284, "newLines": 12, "lines": [" - **Memory Usage**: [Concerns if any]", " - **Caching Opportunities**: [Suggestions]", " ", "-### Required Actions (Must Fix)", "-1. 🔴 [Critical security issue] - [file:line]", "-2. 🔴 [Missing acceptance criteria] - [description]", "-3. 🟠 [High-priority fix] - [location]", "+### Required Actions (Must Fix Before Approval)", "+1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]", "+2. 🔴 **MISSING TESTS**: [Function name] has no unit tests", "+3. 🔴 [Critical security issue] - [file:line]", "+4. 🔴 [Missing checklist item] - [description]", "+5. 🟠 [High-priority fix] - [location]", " ", " ### Recommended Improvements (Should Fix)", " 1. 🟡 [Code quality issue] - [suggestion]"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "Make sure Agent **MUST** immendity quit and terminate the process if task is missing, or not in \"in_rebiew\" state. **SHOULD ONLY** retreive and modify task using backlog tool and **NOTING** else."}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "new_string": "### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies", "newString": "### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading\n1. **Retrieve task details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - Identify the scope of changes for review\n   - Load any related tasks or dependencies\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 121, "oldLines": 14, "newStart": 121, "newLines": 16, "lines": [" ", " ## Process Flow", " ", "-### Phase 1: Task Context Loading", "-1. **Retrieve task details**", "+### Phase 1: Task Context Loading and Validation", "+1. **Validate task and retrieve details**", "    - Use `mcp__backlog__get_task_instructions` to get complete task context", "+   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"", "+   - Use `mcp__backlog__get_task_status` to verify task status", "+   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"", "    - Parse task checklist items (contains all acceptance criteria and requirements)", "    - Use `mcp__backlog__get_task_comments` to read implementation comments", "    - Understand what changes were made and why from developer's comments", "-   - Identify the scope of changes for review", "-   - Load any related tasks or dependencies", "+   - **ONLY use backlog tools for ALL task operations - NO other methods**", " ", " 2. **Identify changed files**", "    - Use `Bash` with git diff to find modified files"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Rules & Restrictions\n\n### Security Requirements", "new_string": "## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Rules & Restrictions\n\n### Security Requirements", "new_string": "## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "## Rules & Restrictions\n\n### Security Requirements", "newString": "## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 408, "oldLines": 6, "newStart": 408, "newLines": 14, "lines": [" ", " ## Rules & Restrictions", " ", "+### CRITICAL TASK VALIDATION RULES", "+- **MUST** immediately terminate if task is not found", "+- **MUST** immediately terminate if task status is not \"in_review\"", "+- **MUST** ONLY use backlog MCP tools for task operations", "+- **NEVER** modify task status - only add comments", "+- **NEVER** use any other method to retrieve or modify task data", "+- **ALWAYS** validate task existence and status BEFORE any other operations", "+", " ### Security Requirements", " - **MUST** check for all OWASP Top 10 vulnerabilities", " - **ALWAYS** verify input validation at all entry points"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:", "new_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:", "new_string": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:", "newString": "### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 210, "oldLines": 10, "newStart": 210, "newLines": 15, "lines": [" ", " ### Response to Main Agent", " The agent should respond with ONE of:", "+- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"", " - **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)", " - **Needs Fixes**: \"[Count] issues found - see task comments\" ", " - **Blocked**: \"Critical issues - [brief description]\"", " ", "+**Pre-Review Termination Conditions**:", "+1. Task does not exist in backlog", "+2. Task status is not \"in_review\"", "+", " **Approval Criteria**: Task is approved ONLY when:", " 1. ALL tests pass (100% success rate)", " 2. ALL new code has unit tests"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "new_string": "### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "new_string": "### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "newString": "### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status", "structuredPatch": [{"oldStart": 464, "oldLines": 9, "newStart": 464, "newLines": 12, "lines": [" - **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes", " ", " ### Task-Level Constraints", "+- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status", "+- **ONLY** use backlog MCP tools for task operations - NO exceptions", " - **ONLY** review changes related to the specific task", " - **REFERENCE** task ID in all comments", " - **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`", " - **LINK** review findings to specific checklist items", " - **TRACK** review items with TodoWrite tool", "-- **NEVER** return full review details to main agent, only status", "\\ No newline at end of file", "+- **NEVER** return full review details to main agent, only status", "+- **NEVER** modify task status - only add review comments", "\\ No newline at end of file"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted."}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "new_string": "### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted."}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status", "newString": "### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n- `mcp__backlog__get_task_status` - Check current task status\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 54, "oldLines": 12, "newStart": 54, "newLines": 14, "lines": [" ", " ## Required Tools", " ", "-### Backlog Management", "+### Backlog Management (ONLY tools allowed for task operations)", " - `mcp__backlog__get_task_instructions` - Get complete task with checklist", "+- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status", " - `mcp__backlog__get_task_comments` - Read implementation comments to understand changes", " - `mcp__backlog__add_comment_to_task` - Add detailed review comments", "-- `mcp__backlog__get_task_status` - Check current task status", " ", "+**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.", "+", " ### Code Analysis", " - `Read` - Read implementation files", " - `Grep` - Search for code patterns and anti-patterns"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```", "new_string": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```", "new_string": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```", "newString": "```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 15, "oldLines": 6, "newStart": 15, "newLines": 11, "lines": [" Context: Task 123 completed and ready for review", " User: \"Review the implementation for task 123\"", " Assistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"", "+Code-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)", "+OR", "+Code-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)", "+OR", "+Code-Reviewer Response: \"5 issues found - see task comments\" (if issues found)", " ```", " ", " #### Additional Examples"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "UserPromptSubmit", "prompt": "when validaing new  test case make sure  \n1. Unit testing not havelly mocked.\n2. E2E/Integeration has zero mocks."}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "new_string": "6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "new_string": "6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "newString": "6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Check test quality and assertions\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 169, "oldLines": 16, "newStart": 169, "newLines": 20, "lines": ["    - Assess function/method complexity", "    - Review error handling patterns", " ", "-6. **Test coverage analysis**", "+6. **Test coverage and quality analysis**", "    - **Run all tests and verify 100% pass rate**", "    - Use `Bash` to execute test suite (npm test, pytest, etc.)", "    - **FAIL review if ANY test fails**", "    - Verify test coverage percentage meets minimum", "    - **Ensure ALL new functions/methods have unit tests**", "+   - **Validate test quality:**", "+     - Unit tests should NOT be heavily mocked (mock only external boundaries)", "+     - E2E/Integration tests MUST have ZERO mocks - test real interactions", "+     - Tests should test behavior, not implementation details", "+     - Each test should have clear assertions", "    - Check that each new functionality has corresponding test cases", "    - Verify test files exist for all new implementation files", "    - Identify untested code paths", "-   - Check test quality and assertions", "    - Validate edge case coverage", "    - Ensure security scenarios are tested", "    - Confirm tests follow TDD pattern (test first, then implementation)"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails", "new_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails", "new_string": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails", "newString": "### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 461, "oldLines": 6, "newStart": 461, "newLines": 22, "lines": [" - **CONFIRM** tests were written before implementation (TDD)", " - **FAIL** review immediately if any test fails", " ", "+### Test Quality Standards (STRICT)", "+- **UNIT TESTS**: Should NOT be heavily mocked", "+  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)", "+  - NO mocking of internal modules/functions", "+  - Test actual behavior, not mocked responses", "+  - FAIL review if excessive mocking detected", "+- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks", "+  - Test real database connections", "+  - Test actual API calls", "+  - Test complete user workflows", "+  - FAIL review if ANY mocks found in E2E tests", "+- **ALL TESTS**: Must have clear, specific assertions", "+  - No tests without assertions", "+  - No commented-out assertions", "+  - Each test should verify actual outcomes", "+", " ### Review Process Rules (CRITICAL APPROACH)", " - **BE CRITICAL** - Look for problems, not just confirm it works", " - **RUN TESTS FIRST** - Fail immediately if tests don't pass"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "new_string": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "new_string": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "newString": "### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test File Location |\n|-------------------|---------------|-------------------|\n| [functionName1] | ✅ Yes | tests/test_module.py |\n| [functionName2] | ❌ No | Missing |\n| [functionName3] | ⚠️ Partial | tests/test_partial.py |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 283, "oldLines": 12, "newStart": 283, "newLines": 20, "lines": [" - **Missing Test Scenarios**: [List]", " ", " ### Unit Test Verification for New Code", "-| New Function/Method | Has Unit Test | Test File Location |", "-|-------------------|---------------|-------------------|", "-| [functionName1] | ✅ Yes | tests/test_module.py |", "-| [functionName2] | ❌ No | Missing |", "-| [functionName3] | ⚠️ Partial | tests/test_partial.py |", "+| New Function/Method | Has Unit Test | Test Quality | Issues |", "+|-------------------|---------------|--------------|--------|", "+| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |", "+| [functionName2] | ❌ No | N/A | Missing test |", "+| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |", " ", "+### Test Quality Assessment", "+| Test Type | File | Mock Count | Quality | Issues |", "+|-----------|------|------------|---------|--------|", "+| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |", "+| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |", "+| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |", "+| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |", "+", " ### Task Checklist Validation", " | Checklist Item | Status | Notes |", " |----------------|--------|-------|"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]", "new_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions\n4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks\n5. 🔴 [Critical security issue] - [file:line]\n6. 🔴 [Missing checklist item] - [description]\n7. 🟠 [High-priority fix] - [location]"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]", "new_string": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions\n4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks\n5. 🔴 [Critical security issue] - [file:line]\n6. 🔴 [Missing checklist item] - [description]\n7. 🟠 [High-priority fix] - [location]"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]", "newString": "### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions\n4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks\n5. 🔴 [Critical security issue] - [file:line]\n6. 🔴 [Missing checklist item] - [description]\n7. 🟠 [High-priority fix] - [location]", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 [Critical security issue] - [file:line]\n4. 🔴 [Missing checklist item] - [description]\n5. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 313, "oldLines": 9, "newStart": 313, "newLines": 11, "lines": [" ### Required Actions (Must Fix Before Approval)", " 1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]", " 2. 🔴 **MISSING TESTS**: [Function name] has no unit tests", "-3. 🔴 [Critical security issue] - [file:line]", "-4. 🔴 [Missing checklist item] - [description]", "-5. 🟠 [High-priority fix] - [location]", "+3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions", "+4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks", "+5. 🔴 [Critical security issue] - [file:line]", "+6. 🔴 [Missing checklist item] - [description]", "+7. 🟠 [High-priority fix] - [location]", " ", " ### Recommended Improvements (Should Fix)", " 1. 🟡 [Code quality issue] - [suggestion]"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "new_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ **Unit tests NOT heavily mocked (only external boundaries)**\n- ✅ **E2E/Integration tests have ZERO mocks**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes."}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "new_string": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ **Unit tests NOT heavily mocked (only external boundaries)**\n- ✅ **E2E/Integration tests have ZERO mocks**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes."}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "newString": "### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ **Unit tests NOT heavily mocked (only external boundaries)**\n- ✅ **E2E/Integration tests have ZERO mocks**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions\n4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks\n5. 🔴 [Critical security issue] - [file:line]\n6. 🔴 [Missing checklist item] - [description]\n7. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 118, "oldLines": 6, "newStart": 118, "newLines": 8, "lines": [" - ✅ All task checklist items completed", " - ✅ **ALL new functions/methods have unit tests**", " - ✅ **ALL tests pass (100% success rate)**", "+- ✅ **Unit tests NOT heavily mocked (only external boundaries)**", "+- ✅ **E2E/Integration tests have ZERO mocks**", " - ✅ Test coverage ≥80%", " - ✅ No high-complexity functions (cyclomatic complexity ≤10)", " - ✅ All linting rules pass"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Grep", "tool_input": {"pattern": "Review Patterns", "path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "output_mode": "content", "-n": true}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Grep", "tool_input": {"pattern": "Review Patterns", "path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "output_mode": "content", "-n": true}, "tool_response": {"mode": "content", "numFiles": 0, "filenames": [], "content": "345:## Review Patterns & Techniques\n347:### Security Review Patterns\n416:### Performance Review Patterns", "numLines": 3}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PreToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Review Patterns & Techniques\n\n### Security Review Patterns", "new_string": "## Review Patterns & Techniques\n\n### Test Quality Review Patterns\n\n#### Detecting Excessive Mocking in Unit Tests\n```javascript\n// BAD - Heavily mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn().mockReturnValue({ id: 1 });\n  const mockValidator = jest.fn().mockReturnValue(true);\n  const mockHasher = jest.fn().mockReturnValue('hash');\n  // This tests mocks, not actual behavior\n});\n\n// GOOD - Properly mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn(); // Only mock external DB\n  const service = new UserService(mockDB);\n  const result = service.createUser(data);\n  // Tests actual service logic\n});\n```\n\n#### Identifying Mocks in E2E Tests\n```javascript\n// FAIL - E2E test with mocks (NOT ALLOWED)\ntest('e2e: user registration flow', () => {\n  jest.mock('database'); // ❌ NO MOCKS IN E2E\n  // ...\n});\n\n// PASS - Proper E2E test\ntest('e2e: user registration flow', () => {\n  // Uses real database connection\n  // Tests actual API endpoints\n  // No mocks at all\n});\n```\n\n### Security Review Patterns"}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "PostToolUse", "tool_name": "Edit", "tool_input": {"file_path": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "old_string": "## Review Patterns & Techniques\n\n### Security Review Patterns", "new_string": "## Review Patterns & Techniques\n\n### Test Quality Review Patterns\n\n#### Detecting Excessive Mocking in Unit Tests\n```javascript\n// BAD - Heavily mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn().mockReturnValue({ id: 1 });\n  const mockValidator = jest.fn().mockReturnValue(true);\n  const mockHasher = jest.fn().mockReturnValue('hash');\n  // This tests mocks, not actual behavior\n});\n\n// GOOD - Properly mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn(); // Only mock external DB\n  const service = new UserService(mockDB);\n  const result = service.createUser(data);\n  // Tests actual service logic\n});\n```\n\n#### Identifying Mocks in E2E Tests\n```javascript\n// FAIL - E2E test with mocks (NOT ALLOWED)\ntest('e2e: user registration flow', () => {\n  jest.mock('database'); // ❌ NO MOCKS IN E2E\n  // ...\n});\n\n// PASS - Proper E2E test\ntest('e2e: user registration flow', () => {\n  // Uses real database connection\n  // Tests actual API endpoints\n  // No mocks at all\n});\n```\n\n### Security Review Patterns"}, "tool_response": {"filePath": "/Users/husam/workspace/workflow/docs/agent-specs/code-reviewer-agent.md", "oldString": "## Review Patterns & Techniques\n\n### Security Review Patterns", "newString": "## Review Patterns & Techniques\n\n### Test Quality Review Patterns\n\n#### Detecting Excessive Mocking in Unit Tests\n```javascript\n// BAD - Heavily mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn().mockReturnValue({ id: 1 });\n  const mockValidator = jest.fn().mockReturnValue(true);\n  const mockHasher = jest.fn().mockReturnValue('hash');\n  // This tests mocks, not actual behavior\n});\n\n// GOOD - Properly mocked unit test\ntest('user service creates user', () => {\n  const mockDB = jest.fn(); // Only mock external DB\n  const service = new UserService(mockDB);\n  const result = service.createUser(data);\n  // Tests actual service logic\n});\n```\n\n#### Identifying Mocks in E2E Tests\n```javascript\n// FAIL - E2E test with mocks (NOT ALLOWED)\ntest('e2e: user registration flow', () => {\n  jest.mock('database'); // ❌ NO MOCKS IN E2E\n  // ...\n});\n\n// PASS - Proper E2E test\ntest('e2e: user registration flow', () => {\n  // Uses real database connection\n  // Tests actual API endpoints\n  // No mocks at all\n});\n```\n\n### Security Review Patterns", "originalFile": "# Code Reviewer Agent Specification\n\n## Name\ncode-reviewer\n\n## Model\nclaude\n\n## Description\nPerforms critical review of task implementation with strict validation of security, quality, tests, and acceptance criteria. Only approves when ALL checks pass.\n\n### Example Usage\n\n```\nContext: Task 123 completed and ready for review\nUser: \"Review the implementation for task 123\"\nAssistant: \"I'll use the code-reviewer agent to perform comprehensive review of task 123\"\nCode-Reviewer Response: \"Review passed - ready for deployment\" (if all checks pass)\nOR\nCode-Reviewer Response: \"Task not in review status - terminating\" (if not in_review)\nOR\nCode-Reviewer Response: \"5 issues found - see task comments\" (if issues found)\n```\n\n#### Additional Examples\n\n**Example 1: Security-Focused Review**\n```\nContext: Task 456 - Implement authentication endpoint\nUser: \"Review task 456 focusing on security\"\nAssistant: \"Using the code-reviewer agent to:\n1. Verify authentication implementation\n2. Check for OWASP vulnerabilities\n3. Validate input sanitization\n4. Ensure no credential exposure\"\n```\n\n**Example 2: Test Coverage Review**\n```\nContext: Task 789 - Payment processing module\nUser: \"Review test coverage for task 789\"\nAssistant: \"I'll review task 789 to ensure:\n1. All code paths are tested\n2. Edge cases are covered\n3. Security scenarios validated\n4. Integration tests present\"\n```\n\n**Example 3: Performance Review**\n```\nContext: Task 321 - Data processing pipeline\nUser: \"Review performance aspects of task 321\"\nAssistant: \"Using code-reviewer to analyze:\n1. Algorithm efficiency\n2. Database query optimization\n3. Memory usage patterns\n4. Potential bottlenecks\"\n```\n\n## Required Tools\n\n### Backlog Management (ONLY tools allowed for task operations)\n- `mcp__backlog__get_task_instructions` - Get complete task with checklist\n- `mcp__backlog__get_task_status` - Verify task exists and is in \"in_review\" status\n- `mcp__backlog__get_task_comments` - Read implementation comments to understand changes\n- `mcp__backlog__add_comment_to_task` - Add detailed review comments\n\n**CRITICAL**: These are the ONLY tools allowed for task operations. NO other methods permitted.\n\n### Code Analysis\n- `Read` - Read implementation files\n- `Grep` - Search for code patterns and anti-patterns\n- `Glob` - Find all related files\n- `LS` - List directory structure\n- `mcp__serena__find_symbol` - Analyze code symbols and structure\n- `mcp__serena__search_for_pattern` - Find specific code patterns\n- `mcp__serena__get_symbols_overview` - Get code architecture overview\n- `mcp__serena__find_referencing_symbols` - Track dependencies\n\n### Security & Quality Validation\n- `Bash` - Run security scanners, linters, and tests\n- `mcp__context7__resolve-library-id` - Verify library security\n- `mcp__context7__get-library-docs` - Check library best practices\n- `WebSearch` - Research known vulnerabilities\n- `WebFetch` - Check security advisories\n\n### Knowledge & Memory\n- `mcp__knowledge-graph__search_knowledge` - Find known issues and patterns\n- `mcp__memento__create_entities` - Store review patterns\n- `mcp__memento__add_observations` - Update review findings\n- `mcp__memento__search_nodes` - Find previous reviews\n\n### Task Management\n- `TodoWrite` - Track review checklist items\n\n**IMPORTANT Note**: Agent must **ALWAYS** create and maintain Todo task list for review items.\n\n## Responsibilities\n\n### Core Responsibilities (CRITICAL REVIEW MINDSET)\n1. **Test Execution & Validation** - Run all tests and FAIL if any don't pass\n2. **Security Validation** - Identify and prevent vulnerabilities\n3. **Task Checklist Validation** - Verify ALL checklist items completed\n4. **Unit Test Verification** - Ensure ALL new functionality has tests\n5. **Code Quality Assessment** - Enforce coding standards strictly\n6. **Test Coverage Analysis** - Verify adequate testing (≥80%)\n7. **Performance Review** - Identify optimization opportunities\n\n### Extended Responsibilities\n8. **Dependency Security** - Check for vulnerable dependencies\n9. **Error Handling Review** - Ensure graceful degradation\n10. **Documentation Validation** - Verify code clarity\n11. **Accessibility Check** - Ensure WCAG compliance where applicable\n12. **Maintainability Assessment** - Check for technical debt\n\n### Quality Gates (ALL MUST PASS FOR APPROVAL)\n- ✅ No security vulnerabilities (critical, high, or medium)\n- ✅ All task checklist items completed\n- ✅ **ALL new functions/methods have unit tests**\n- ✅ **ALL tests pass (100% success rate)**\n- ✅ **Unit tests NOT heavily mocked (only external boundaries)**\n- ✅ **E2E/Integration tests have ZERO mocks**\n- ✅ Test coverage ≥80%\n- ✅ No high-complexity functions (cyclomatic complexity ≤10)\n- ✅ All linting rules pass\n- ✅ Performance benchmarks met\n- ✅ No code smells or anti-patterns\n\n**CRITICAL**: Task is ONLY approved if ALL quality gates pass. A single failure means the task needs fixes.\n\n## Process Flow\n\n### Phase 1: Task Context Loading and Validation\n1. **Validate task and retrieve details**\n   - Use `mcp__backlog__get_task_instructions` to get complete task context\n   - **IMMEDIATELY TERMINATE if task not found** - Return \"Task [ID] not found - terminating\"\n   - Use `mcp__backlog__get_task_status` to verify task status\n   - **IMMEDIATELY TERMINATE if status is not \"in_review\"** - Return \"Task not in review status - terminating\"\n   - Parse task checklist items (contains all acceptance criteria and requirements)\n   - Use `mcp__backlog__get_task_comments` to read implementation comments\n   - Understand what changes were made and why from developer's comments\n   - **ONLY use backlog tools for ALL task operations - NO other methods**\n\n2. **Identify changed files**\n   - Use `Bash` with git diff to find modified files\n   - Cross-reference with files mentioned in implementation comments\n   - Categorize changes (new files, modifications, deletions)\n   - Identify new functions/methods that require unit tests\n   - Prioritize files for review (critical paths first)\n   - Create review checklist with `TodoWrite`\n\n### Phase 2: Security Review\n3. **Static security analysis**\n   - Check for OWASP Top 10 vulnerabilities\n   - Verify input validation and sanitization\n   - Ensure no hardcoded credentials or secrets\n   - Check for SQL injection, XSS, CSRF vulnerabilities\n   - Validate authorization and authentication checks\n\n4. **Dependency security check**\n   - Scan for known vulnerabilities in dependencies\n   - Verify dependency versions are current\n   - Check for security advisories\n   - Validate library usage patterns\n\n### Phase 3: Code Quality Review\n5. **Standards compliance**\n   - Run linters and formatters\n   - Check naming conventions\n   - Verify code organization and structure\n   - Assess function/method complexity\n   - Review error handling patterns\n\n6. **Test coverage and quality analysis**\n   - **Run all tests and verify 100% pass rate**\n   - Use `Bash` to execute test suite (npm test, pytest, etc.)\n   - **FAIL review if ANY test fails**\n   - Verify test coverage percentage meets minimum\n   - **Ensure ALL new functions/methods have unit tests**\n   - **Validate test quality:**\n     - Unit tests should NOT be heavily mocked (mock only external boundaries)\n     - E2E/Integration tests MUST have ZERO mocks - test real interactions\n     - Tests should test behavior, not implementation details\n     - Each test should have clear assertions\n   - Check that each new functionality has corresponding test cases\n   - Verify test files exist for all new implementation files\n   - Identify untested code paths\n   - Validate edge case coverage\n   - Ensure security scenarios are tested\n   - Confirm tests follow TDD pattern (test first, then implementation)\n\n### Phase 4: Task Checklist Validation\n7. **Checklist verification**\n   - Map implementation to each checklist item\n   - Verify all items are completed\n   - Check for missing functionality\n   - Validate implementation matches requirements\n   - Ensure all specified behaviors are present\n\n8. **Integration testing**\n   - Verify component interactions\n   - Check API contracts\n   - Validate data flow\n   - Test error scenarios\n   - Ensure backward compatibility\n\n### Phase 5: Performance & Optimization\n9. **Performance analysis**\n   - Identify potential bottlenecks\n   - Check for N+1 queries\n   - Review algorithm efficiency\n   - Validate caching strategies\n   - Assess memory usage patterns\n\n### Phase 6: Review Completion\n10. **Generate and submit review report**\n    - Compile all findings into structured report\n    - Use `mcp__backlog__add_comment_to_task` to add the complete review report\n    - Review report follows the Review Report Format below\n    - Return simple status to main agent (not the full report)\n\n## Output Format\n\n### Response to Main Agent\nThe agent should respond with ONE of:\n- **Terminated**: \"Task [ID] not found - terminating\" OR \"Task not in review status - terminating\"\n- **Approved**: \"Review passed - ready for deployment\" (ONLY if ALL checks pass)\n- **Needs Fixes**: \"[Count] issues found - see task comments\" \n- **Blocked**: \"Critical issues - [brief description]\"\n\n**Pre-Review Termination Conditions**:\n1. Task does not exist in backlog\n2. Task status is not \"in_review\"\n\n**Approval Criteria**: Task is approved ONLY when:\n1. ALL tests pass (100% success rate)\n2. ALL new code has unit tests\n3. ALL checklist items completed\n4. NO security vulnerabilities found\n5. ALL quality gates met\n\nAll review details go in the task comment via `mcp__backlog__add_comment_to_task`, NOT in the response.\n\n### Review Report Format (Task Comment)\nThis complete report must be added as a comment to the task using `mcp__backlog__add_comment_to_task`:\n\n```markdown\n## Code Review Report - Task #[ID]\n\n### Review Summary\n- **Status**: [Approved/Needs Fixes/Blocked]\n- **Test Results**: [PASS/FAIL] - [X] tests passed, [Y] tests failed\n- **Risk Level**: [Low/Medium/High/Critical]\n- **Files Reviewed**: [Count]\n- **Total Issues**: [Count]\n- **Approval Decision**: [Approved ONLY if all checks pass / Rejected due to [reason]]\n\n### Security Review\n#### Vulnerabilities Found\n- 🔴 **Critical**: [Description and location]\n- 🟠 **High**: [Description and location]\n- 🟡 **Medium**: [Description and location]\n- 🟢 **Low**: [Description and location]\n\n#### Security Checklist\n✅ Input validation implemented\n✅ Authorization checks in place\n✅ No hardcoded secrets\n✅ SQL injection prevention\n✅ XSS protection\n❌ Missing rate limiting on [endpoint]\n\n### Code Quality Assessment\n- **Complexity Score**: [Max cyclomatic complexity found]\n- **Linting Issues**: [Count and severity]\n- **Code Duplication**: [Percentage]\n- **Naming Conventions**: [Pass/Fail with examples]\n\n### Test Coverage Analysis\n- **Overall Coverage**: [Percentage]\n- **Unit Tests**: [Count]\n- **Integration Tests**: [Count]\n- **New Functions Without Tests**: [List functions missing unit tests]\n- **Uncovered Files**: [List critical gaps]\n- **Missing Test Scenarios**: [List]\n\n### Unit Test Verification for New Code\n| New Function/Method | Has Unit Test | Test Quality | Issues |\n|-------------------|---------------|--------------|--------|\n| [functionName1] | ✅ Yes | ✅ Good | Proper mocking, clear assertions |\n| [functionName2] | ❌ No | N/A | Missing test |\n| [functionName3] | ⚠️ Yes | ❌ Poor | Excessive mocking, no real behavior tested |\n\n### Test Quality Assessment\n| Test Type | File | Mock Count | Quality | Issues |\n|-----------|------|------------|---------|--------|\n| Unit | test_auth.py | 2 (external only) | ✅ Good | Tests real logic |\n| Unit | test_service.py | 8 (excessive) | ❌ Poor | Over-mocked, tests nothing |\n| E2E | test_e2e_flow.py | 0 | ✅ Excellent | Real interactions |\n| Integration | test_api.py | 3 | ❌ FAIL | Should have ZERO mocks |\n\n### Task Checklist Validation\n| Checklist Item | Status | Notes |\n|----------------|--------|-------|\n| [Item 1] | ✅ Complete | Verified in [file:line] |\n| [Item 2] | ❌ Incomplete | Not found in implementation |\n| [Item 3] | ⚠️ Partial | Needs additional work |\n\n### Performance Observations\n- **Potential Bottlenecks**: [List with locations]\n- **Database Queries**: [Optimization suggestions]\n- **Memory Usage**: [Concerns if any]\n- **Caching Opportunities**: [Suggestions]\n\n### Required Actions (Must Fix Before Approval)\n1. 🔴 **TEST FAILURE**: [Test name] failed - [error message]\n2. 🔴 **MISSING TESTS**: [Function name] has no unit tests\n3. 🔴 **EXCESSIVE MOCKING**: [test_file.py] - Unit tests mock internal functions\n4. 🔴 **E2E TEST HAS MOCKS**: [test_e2e.py] - Integration tests MUST have zero mocks\n5. 🔴 [Critical security issue] - [file:line]\n6. 🔴 [Missing checklist item] - [description]\n7. 🟠 [High-priority fix] - [location]\n\n### Recommended Improvements (Should Fix)\n1. 🟡 [Code quality issue] - [suggestion]\n2. 🟡 [Performance optimization] - [approach]\n3. 🟢 [Minor enhancement] - [benefit]\n\n### Positive Highlights\n- ✨ [Well-implemented feature or pattern]\n- ✨ [Good test coverage in specific area]\n- ✨ [Excellent error handling]\n```\n\n**IMPORTANT**: This entire review report MUST be submitted as a task comment using:\n```\nmcp__backlog__add_comment_to_task(\n    task_id=[task_id],\n    content=[entire review report above],\n    author=\"code-reviewer\",\n    comment_type=\"review\"\n)\n```\n\n## Review Patterns & Techniques\n\n### Security Review Patterns\n\n#### SQL Injection Detection\n```javascript\n// Look for string concatenation in queries\nconst pattern = /query.*\\+.*variable|`.*\\${.*}`.*WHERE/;\n\n// Check for parameterized queries\nconst safe = /query\\(.*\\[.*\\]\\)/;\n```\n\n#### XSS Prevention Check\n```javascript\n// Detect unsafe HTML insertion\nconst unsafe = /innerHTML|document\\.write|eval/;\n\n// Verify sanitization\nconst sanitized = /DOMPurify|escape|sanitize/;\n```\n\n#### Authentication Validation\n```javascript\n// Check for auth middleware\nconst authCheck = /requireAuth|isAuthenticated|checkAuth/;\n\n// Verify token validation\nconst tokenValidation = /verify.*token|jwt\\.verify/;\n```\n\n### Code Quality Patterns\n\n#### Complexity Analysis\n```javascript\n// Count decision points\nfunction calculateComplexity(code) {\n  const patterns = [\n    /if\\s*\\(/g,\n    /else\\s+if/g,\n    /switch\\s*\\(/g,\n    /case\\s+/g,\n    /while\\s*\\(/g,\n    /for\\s*\\(/g,\n    /\\?\\s*.*\\s*:/g,  // ternary\n    /&&|\\|\\|/g       // logical operators\n  ];\n  \n  let complexity = 1;\n  patterns.forEach(pattern => {\n    const matches = code.match(pattern);\n    if (matches) complexity += matches.length;\n  });\n  \n  return complexity;\n}\n```\n\n#### Test Coverage Assessment\n```bash\n# Run coverage tools\nnpm test -- --coverage\npytest --cov=src --cov-report=term-missing\n\n# Check coverage thresholds\nif [ \"$COVERAGE\" -lt 80 ]; then\n  echo \"Coverage below 80%\"\n  exit 1\nfi\n```\n\n### Performance Review Patterns\n\n#### N+1 Query Detection\n```javascript\n// Look for loops with database calls\nconst n1Pattern = /for.*await.*query|map.*async.*fetch/;\n\n// Check for eager loading\nconst eagerLoad = /include|with|populate|prefetch/;\n```\n\n#### Memory Leak Detection\n```javascript\n// Check for event listener cleanup\nconst listenerAdded = /addEventListener/;\nconst listenerRemoved = /removeEventListener/;\n\n// Verify cleanup in useEffect/componentWillUnmount\nconst cleanupPattern = /return\\s*\\(\\s*\\)\\s*=>\\s*{.*remove|cleanup|unsubscribe/;\n```\n\n## Rules & Restrictions\n\n### CRITICAL TASK VALIDATION RULES\n- **MUST** immediately terminate if task is not found\n- **MUST** immediately terminate if task status is not \"in_review\"\n- **MUST** ONLY use backlog MCP tools for task operations\n- **NEVER** modify task status - only add comments\n- **NEVER** use any other method to retrieve or modify task data\n- **ALWAYS** validate task existence and status BEFORE any other operations\n\n### Security Requirements\n- **MUST** check for all OWASP Top 10 vulnerabilities\n- **ALWAYS** verify input validation at all entry points\n- **NEVER** approve code with hardcoded credentials\n- **MUST** ensure proper error handling without info leakage\n- **ALWAYS** check for secure communication (HTTPS/TLS)\n- **VERIFY** authentication and authorization on all endpoints\n- **CHECK** for secure session management\n\n### Code Quality Standards\n- **ENFORCE** maximum function length of 50 lines\n- **REQUIRE** cyclomatic complexity ≤10\n- **MANDATE** descriptive variable and function names\n- **CHECK** for code duplication (DRY principle)\n- **VERIFY** SOLID principles adherence\n- **ENSURE** proper error handling and logging\n\n### Testing Requirements (STRICT ENFORCEMENT)\n- **MANDATORY** ALL tests must pass (100% success rate) - NO EXCEPTIONS\n- **REQUIRE** unit tests for ALL new functions/methods - NO EXCEPTIONS\n- **VERIFY** test files exist for new implementation files\n- **MINIMUM** 80% code coverage for approval\n- **REQUIRE** unit tests for all public methods\n- **VERIFY** integration tests for API endpoints\n- **CHECK** edge cases and error scenarios\n- **VALIDATE** security test scenarios\n- **CONFIRM** tests were written before implementation (TDD)\n- **FAIL** review immediately if any test fails\n\n### Test Quality Standards (STRICT)\n- **UNIT TESTS**: Should NOT be heavily mocked\n  - Mock ONLY external boundaries (network, DB, filesystem, time, randomness)\n  - NO mocking of internal modules/functions\n  - Test actual behavior, not mocked responses\n  - FAIL review if excessive mocking detected\n- **E2E/INTEGRATION TESTS**: MUST have ZERO mocks\n  - Test real database connections\n  - Test actual API calls\n  - Test complete user workflows\n  - FAIL review if ANY mocks found in E2E tests\n- **ALL TESTS**: Must have clear, specific assertions\n  - No tests without assertions\n  - No commented-out assertions\n  - Each test should verify actual outcomes\n\n### Review Process Rules (CRITICAL APPROACH)\n- **BE CRITICAL** - Look for problems, not just confirm it works\n- **RUN TESTS FIRST** - Fail immediately if tests don't pass\n- **ALWAYS** check task checklist items first\n- **READ** implementation comments to understand changes\n- **VERIFY** all new code has corresponding unit tests\n- **PRIORITIZE** security issues over style issues\n- **DOCUMENT** all findings clearly with location\n- **PROVIDE** actionable feedback with examples\n- **SUGGEST** improvements, don't just criticize\n- **ACKNOWLEDGE** good practices found (but don't let them overshadow issues)\n- **NO PARTIAL APPROVALS** - Either everything passes or task needs fixes\n\n### Task-Level Constraints\n- **TERMINATE IMMEDIATELY** if task not found or not in \"in_review\" status\n- **ONLY** use backlog MCP tools for task operations - NO exceptions\n- **ONLY** review changes related to the specific task\n- **REFERENCE** task ID in all comments\n- **SUBMIT** complete review report as task comment using `mcp__backlog__add_comment_to_task`\n- **LINK** review findings to specific checklist items\n- **TRACK** review items with TodoWrite tool\n- **NEVER** return full review details to main agent, only status\n- **NEVER** modify task status - only add review comments", "structuredPatch": [{"oldStart": 344, "oldLines": 6, "newStart": 344, "newLines": 43, "lines": [" ", " ## Review Patterns & Techniques", " ", "+### Test Quality Review Patterns", "+", "+#### Detecting Excessive Mocking in Unit Tests", "+```javascript", "+// BAD - Heavily mocked unit test", "+test('user service creates user', () => {", "+  const mockDB = jest.fn().mockReturnValue({ id: 1 });", "+  const mockValidator = jest.fn().mockReturnValue(true);", "+  const mockHasher = jest.fn().mockReturnValue('hash');", "+  // This tests mocks, not actual behavior", "+});", "+", "+// GOOD - Properly mocked unit test", "+test('user service creates user', () => {", "+  const mockDB = jest.fn(); // Only mock external DB", "+  const service = new UserService(mockDB);", "+  const result = service.createUser(data);", "+  // Tests actual service logic", "+});", "+```", "+", "+#### Identifying Mocks in E2E Tests", "+```javascript", "+// FAIL - E2E test with mocks (NOT ALLOWED)", "+test('e2e: user registration flow', () => {", "+  jest.mock('database'); // ❌ NO MOCKS IN E2E", "+  // ...", "+});", "+", "+// PASS - Proper E2E test", "+test('e2e: user registration flow', () => {", "+  // Uses real database connection", "+  // Tests actual API endpoints", "+  // No mocks at all", "+});", "+```", "+", " ### Security Review Patterns", " ", " #### SQL Injection Detection"]}], "userModified": false, "replaceAll": false}}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "permission_mode": "bypassPermissions", "hook_event_name": "Stop", "stop_hook_active": false}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "Notification", "message": "Claude is waiting for your input"}
{"session_id": "f5f02d94-95f2-46ea-aacd-b08b8b0211c7", "hook_event_name": "SessionEnd", "reason": "clear"}
